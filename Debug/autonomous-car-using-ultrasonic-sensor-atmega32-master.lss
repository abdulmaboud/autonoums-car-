
autonomous-car-using-ultrasonic-sensor-atmega32-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  000030b0  00003144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800182  00800182  00003266  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  00003268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001377  00000000  00000000  00006658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000079cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a16c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b4f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c6c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cb7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d4ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 af 0a 	jmp	0x155e	; 0x155e <__vector_1>
       8:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_2>
       c:	0c 94 15 0b 	jmp	0x162a	; 0x162a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <__vector_9>
      28:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_10>
      2c:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <main>
      8a:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e7       	ldi	r22, 0x76	; 118
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2b 18 	jmp	0x3056	; 0x3056 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 47 18 	jmp	0x308e	; 0x308e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 27 18 	jmp	0x304e	; 0x304e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 58       	subi	r30, 0x82	; 130
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <TIMER0_VoidInit>:

static void (*Timer0ovf_pvCallBackFunc)(void) = NULL;


void TIMER0_VoidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/*Wave generation mode : Normal*/
		CLR_BIT(TCCR0,TCCR0_WGM00);
     e36:	a3 e5       	ldi	r26, 0x53	; 83
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e3 e5       	ldi	r30, 0x53	; 83
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8f 7b       	andi	r24, 0xBF	; 191
     e42:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
     e44:	a3 e5       	ldi	r26, 0x53	; 83
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e3 e5       	ldi	r30, 0x53	; 83
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24

	/*No Oc0*/
		CLR_BIT(TCCR0,TCCR0_COM00);
     e52:	a3 e5       	ldi	r26, 0x53	; 83
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e3 e5       	ldi	r30, 0x53	; 83
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7e       	andi	r24, 0xEF	; 239
     e5e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM01);
     e60:	a3 e5       	ldi	r26, 0x53	; 83
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e3 e5       	ldi	r30, 0x53	; 83
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8f 7d       	andi	r24, 0xDF	; 223
     e6c:	8c 93       	st	X, r24

	/*CLK SET PRESCALER = 64*/
		SET_BIT(TCCR0,TCCR0_CS00);
     e6e:	a3 e5       	ldi	r26, 0x53	; 83
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e3 e5       	ldi	r30, 0x53	; 83
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	81 60       	ori	r24, 0x01	; 1
     e7a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_CS01);
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	82 60       	ori	r24, 0x02	; 2
     e88:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_CS02);
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8b 7f       	andi	r24, 0xFB	; 251
     e96:	8c 93       	st	X, r24
	/*Compare mode interrupt enable*/
		SET_BIT(TIMSK,TIMSK_OCIE0);
     e98:	a9 e5       	ldi	r26, 0x59	; 89
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e9 e5       	ldi	r30, 0x59	; 89
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c 93       	st	X, r24
}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <TIMEROvf_u8Enable>:

uint8 TIMEROvf_u8Enable(uint8 Copy_u8TimerNumber){
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <TIMEROvf_u8Enable+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <TIMEROvf_u8Enable+0x8>
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
     eba:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerNumber){
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3c 83       	std	Y+4, r19	; 0x04
     ec4:	2b 83       	std	Y+3, r18	; 0x03
     ec6:	8b 81       	ldd	r24, Y+3	; 0x03
     ec8:	9c 81       	ldd	r25, Y+4	; 0x04
     eca:	81 30       	cpi	r24, 0x01	; 1
     ecc:	91 05       	cpc	r25, r1
     ece:	89 f0       	breq	.+34     	; 0xef2 <TIMEROvf_u8Enable+0x46>
     ed0:	2b 81       	ldd	r18, Y+3	; 0x03
     ed2:	3c 81       	ldd	r19, Y+4	; 0x04
     ed4:	22 30       	cpi	r18, 0x02	; 2
     ed6:	31 05       	cpc	r19, r1
     ed8:	a1 f0       	breq	.+40     	; 0xf02 <TIMEROvf_u8Enable+0x56>
     eda:	8b 81       	ldd	r24, Y+3	; 0x03
     edc:	9c 81       	ldd	r25, Y+4	; 0x04
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	c1 f4       	brne	.+48     	; 0xf12 <TIMEROvf_u8Enable+0x66>
	case TIMER0:
		SET_BIT(TIMSK, TIMSK_TOIE0);
     ee2:	a9 e5       	ldi	r26, 0x59	; 89
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e9 e5       	ldi	r30, 0x59	; 89
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	81 60       	ori	r24, 0x01	; 1
     eee:	8c 93       	st	X, r24
     ef0:	12 c0       	rjmp	.+36     	; 0xf16 <TIMEROvf_u8Enable+0x6a>
		break;
	case TIMER1:
		SET_BIT(TIMSK, TIMSK_TOIE1);
     ef2:	a9 e5       	ldi	r26, 0x59	; 89
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e9 e5       	ldi	r30, 0x59	; 89
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	84 60       	ori	r24, 0x04	; 4
     efe:	8c 93       	st	X, r24
     f00:	0a c0       	rjmp	.+20     	; 0xf16 <TIMEROvf_u8Enable+0x6a>
		break;
	case TIMER2:
		SET_BIT(TIMSK, TIMSK_TOIE2);
     f02:	a9 e5       	ldi	r26, 0x59	; 89
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e9 e5       	ldi	r30, 0x59	; 89
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	80 64       	ori	r24, 0x40	; 64
     f0e:	8c 93       	st	X, r24
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <TIMEROvf_u8Enable+0x6a>
		break;
	default:
		Local_u8ErrorState = NOK;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
     f16:	89 81       	ldd	r24, Y+1	; 0x01

}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <TIMEROvf_u8Disable>:


uint8 TIMEROvf_u8Disable(uint8 Copy_u8TimerNumber){
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <TIMEROvf_u8Disable+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <TIMEROvf_u8Disable+0x8>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
     f34:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8TimerNumber){
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	3c 83       	std	Y+4, r19	; 0x04
     f3e:	2b 83       	std	Y+3, r18	; 0x03
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	81 30       	cpi	r24, 0x01	; 1
     f46:	91 05       	cpc	r25, r1
     f48:	89 f0       	breq	.+34     	; 0xf6c <TIMEROvf_u8Disable+0x46>
     f4a:	2b 81       	ldd	r18, Y+3	; 0x03
     f4c:	3c 81       	ldd	r19, Y+4	; 0x04
     f4e:	22 30       	cpi	r18, 0x02	; 2
     f50:	31 05       	cpc	r19, r1
     f52:	a1 f0       	breq	.+40     	; 0xf7c <TIMEROvf_u8Disable+0x56>
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	c1 f4       	brne	.+48     	; 0xf8c <TIMEROvf_u8Disable+0x66>
	case TIMER0:
		CLR_BIT(TIMSK, TIMSK_TOIE0);
     f5c:	a9 e5       	ldi	r26, 0x59	; 89
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e9 e5       	ldi	r30, 0x59	; 89
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	8e 7f       	andi	r24, 0xFE	; 254
     f68:	8c 93       	st	X, r24
     f6a:	12 c0       	rjmp	.+36     	; 0xf90 <TIMEROvf_u8Disable+0x6a>
		break;
	case TIMER1:
		CLR_BIT(TIMSK, TIMSK_TOIE1);
     f6c:	a9 e5       	ldi	r26, 0x59	; 89
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e9 e5       	ldi	r30, 0x59	; 89
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8b 7f       	andi	r24, 0xFB	; 251
     f78:	8c 93       	st	X, r24
     f7a:	0a c0       	rjmp	.+20     	; 0xf90 <TIMEROvf_u8Disable+0x6a>
		break;
	case TIMER2:
		CLR_BIT(TIMSK, TIMSK_TOIE2);
     f7c:	a9 e5       	ldi	r26, 0x59	; 89
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e9 e5       	ldi	r30, 0x59	; 89
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 7b       	andi	r24, 0xBF	; 191
     f88:	8c 93       	st	X, r24
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <TIMEROvf_u8Disable+0x6a>
		break;
	default:
		Local_u8ErrorState = NOK;
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
     f90:	89 81       	ldd	r24, Y+1	; 0x01

}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <TIMER0ovf_u8SetCallBack>:



uint8 TIMER0ovf_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <TIMER0ovf_u8SetCallBack+0x6>
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState=OK;
     fb0:	19 82       	std	Y+1, r1	; 0x01
			if(Copy_pvCallBackFunc!=NULL)
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	39 f0       	breq	.+14     	; 0xfc8 <TIMER0ovf_u8SetCallBack+0x28>
			{
				Timer0ovf_pvCallBackFunc = Copy_pvCallBackFunc;
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	90 93 83 01 	sts	0x0183, r25
     fc2:	80 93 82 01 	sts	0x0182, r24
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <TIMER0ovf_u8SetCallBack+0x2c>

			}
			else
			{
				Local_u8ErrorState=NULL_POINTER;
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	89 83       	std	Y+1, r24	; 0x01
			}

			return Local_u8ErrorState;
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <Timer0_voidSetTimerValue>:

void Timer0_voidSetTimerValue(uint8 Copy_u8Value)
{
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8Value;
     fe6:	e2 e5       	ldi	r30, 0x52	; 82
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	80 83       	st	Z, r24
}
     fee:	0f 90       	pop	r0
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	08 95       	ret

00000ff6 <__vector_11>:

/*Timer 0 Overflow ISR*/
void __vector_11(void) __attribute__((signal));

void __vector_11(void)
{
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	if(Timer0ovf_pvCallBackFunc!=NULL)
    1020:	80 91 82 01 	lds	r24, 0x0182
    1024:	90 91 83 01 	lds	r25, 0x0183
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	29 f0       	breq	.+10     	; 0x1036 <__vector_11+0x40>
	{
		Timer0ovf_pvCallBackFunc();
    102c:	e0 91 82 01 	lds	r30, 0x0182
    1030:	f0 91 83 01 	lds	r31, 0x0183
    1034:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_10>:

/*Timer 0 Compare ISR*/
void __vector_10(void) __attribute__((signal));

void __vector_10(void)
{
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
	if(Timer0ovf_pvCallBackFunc!=NULL)
    1086:	80 91 82 01 	lds	r24, 0x0182
    108a:	90 91 83 01 	lds	r25, 0x0183
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	29 f0       	breq	.+10     	; 0x109c <__vector_10+0x40>
		{
			Timer0ovf_pvCallBackFunc();
    1092:	e0 91 82 01 	lds	r30, 0x0182
    1096:	f0 91 83 01 	lds	r31, 0x0183
    109a:	09 95       	icall
		}
		else
		{
			/*Do nothing*/
		}
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	ff 91       	pop	r31
    10a2:	ef 91       	pop	r30
    10a4:	bf 91       	pop	r27
    10a6:	af 91       	pop	r26
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	7f 91       	pop	r23
    10ae:	6f 91       	pop	r22
    10b0:	5f 91       	pop	r21
    10b2:	4f 91       	pop	r20
    10b4:	3f 91       	pop	r19
    10b6:	2f 91       	pop	r18
    10b8:	0f 90       	pop	r0
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	0f 90       	pop	r0
    10be:	1f 90       	pop	r1
    10c0:	18 95       	reti

000010c2 <PWM0_VoidInit>:
#include "../TIMER/TIMER_reg.h"
#include "PWM_interface.h"



void PWM0_VoidInit(void){
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
	/* Configuring timer2 registers
	 * to fast PWM mode
	 *  */
		SET_BIT(TCCR2,TCCR2_WGM20);
    10ca:	a5 e4       	ldi	r26, 0x45	; 69
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e4       	ldi	r30, 0x45	; 69
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 64       	ori	r24, 0x40	; 64
    10d6:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_WGM21);
    10d8:	a5 e4       	ldi	r26, 0x45	; 69
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e4       	ldi	r30, 0x45	; 69
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	88 60       	ori	r24, 0x08	; 8
    10e4:	8c 93       	st	X, r24
	/* inverted PWM mode
	 * Set OC2 on compare match, clear OC2 at overflow
	 * when timerCount = OCR2
	 * */
		SET_BIT(TCCR2,TCCR2_COM20);
    10e6:	a5 e4       	ldi	r26, 0x45	; 69
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e5 e4       	ldi	r30, 0x45	; 69
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	80 61       	ori	r24, 0x10	; 16
    10f2:	8c 93       	st	X, r24
		SET_BIT(TCCR2,TCCR2_COM21);
    10f4:	a5 e4       	ldi	r26, 0x45	; 69
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e4       	ldi	r30, 0x45	; 69
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	80 62       	ori	r24, 0x20	; 32
    1100:	8c 93       	st	X, r24
	/* no prescale
	 * and start timer2*/
		SET_BIT(TCCR2,TCCR2_CS20);
    1102:	a5 e4       	ldi	r26, 0x45	; 69
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e4       	ldi	r30, 0x45	; 69
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	81 60       	ori	r24, 0x01	; 1
    110e:	8c 93       	st	X, r24
}
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <PWM0_VoidSetDutyCycle>:


void PWM0_VoidSetDutyCycle(uint8 Copy_u8DutyCycle){
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	89 83       	std	Y+1, r24	; 0x01
	// OCR0 holds the on time of the cycle
	OCR2 = 255 - ((float32)Copy_u8DutyCycle / 100.0f) * 255.0f;
    1126:	03 e4       	ldi	r16, 0x43	; 67
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	bc 01       	movw	r22, r24
    1136:	cd 01       	movw	r24, r26
    1138:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	48 ec       	ldi	r20, 0xC8	; 200
    114a:	52 e4       	ldi	r21, 0x42	; 66
    114c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	4f e7       	ldi	r20, 0x7F	; 127
    115e:	53 ec       	ldi	r21, 0xC3	; 195
    1160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	bc 01       	movw	r22, r24
    116a:	cd 01       	movw	r24, r26
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	4f e7       	ldi	r20, 0x7F	; 127
    1172:	53 e4       	ldi	r21, 0x43	; 67
    1174:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	f8 01       	movw	r30, r16
    118a:	80 83       	st	Z, r24
}
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <EXTI_voidInit>:

/*GLobal array of pointer to function*/
void (*EXTI_pvCallBackFunc[3])(void) = {NULL,NULL,NULL};

void EXTI_voidInit(void)
{
    1198:	df 93       	push	r29
    119a:	cf 93       	push	r28
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC00);
#elif EXTI_u8_INT0_SENSE_CONTROL == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
	CLR_BIT(MCUCR,MCUCR_ISC00);
#elif EXTI_u8_INT0_SENSE_CONTROL == RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
    11a0:	a5 e5       	ldi	r26, 0x55	; 85
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e5 e5       	ldi	r30, 0x55	; 85
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	82 60       	ori	r24, 0x02	; 2
    11ac:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
    11ae:	a5 e5       	ldi	r26, 0x55	; 85
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e5 e5       	ldi	r30, 0x55	; 85
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC10);
#elif EXTI_u8_INT1_SENSE_CONTROL == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC11);
	CLR_BIT(MCUCR,MCUCR_ISC10);
#elif EXTI_u8_INT1_SENSE_CONTROL == RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC11);
    11bc:	a5 e5       	ldi	r26, 0x55	; 85
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e5 e5       	ldi	r30, 0x55	; 85
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	88 60       	ori	r24, 0x08	; 8
    11c8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC10);
    11ca:	a5 e5       	ldi	r26, 0x55	; 85
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e5       	ldi	r30, 0x55	; 85
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	84 60       	ori	r24, 0x04	; 4
    11d6:	8c 93       	st	X, r24
#endif
/*******************************************************************/
#if EXTI_u8_INT2_SENSE_CONTROL == FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC2);
#elif EXTI_u8_INT2_SENSE_CONTROL == RISING_EDGE
	SET_BIT(MCUCSR,MCUCSR_ISC2);
    11d8:	a4 e5       	ldi	r26, 0x54	; 84
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e4 e5       	ldi	r30, 0x54	; 84
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	8c 93       	st	X, r24

/*******************************************************************/
/*******************************************************************/

#if EXTI_u8_INT0_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT0);
    11e6:	ab e5       	ldi	r26, 0x5B	; 91
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	eb e5       	ldi	r30, 0x5B	; 91
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	8c 93       	st	X, r24
#else
#error "Wrong EXIT_u8_INT0_INIT_SENSE_CONTROL configuration option"
#endif

#if EXTI_u8_INT1_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT1);
    11f4:	ab e5       	ldi	r26, 0x5B	; 91
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	eb e5       	ldi	r30, 0x5B	; 91
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8f 77       	andi	r24, 0x7F	; 127
    1200:	8c 93       	st	X, r24
#else
#error "Wrong EXIT_u8_INT1_INIT_SENSE_CONTROL configuration option"
#endif

#if EXTI_u8_INT2_INIT_STATE == DISABLED
	CLR_BIT(GICR,GICR_INT2);
    1202:	ab e5       	ldi	r26, 0x5B	; 91
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	eb e5       	ldi	r30, 0x5B	; 91
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8f 7d       	andi	r24, 0xDF	; 223
    120e:	8c 93       	st	X, r24
	SET_BIT(GICR,GICR_INT2);
#else
#error "Wrong EXIT_u8_INT2_INIT_SENSE_CONTROL configuration option"
#endif

}
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <EXTI_u8SetSenseControl>:
uint8 EXTI_u8SetSenseControl(uint8 Copy_u8IntNum,uint8 Copy_u8Sense)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	29 97       	sbiw	r28, 0x09	; 9
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    122e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8IntNum == EXTI_u8_INT0)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	88 23       	and	r24, r24
    1234:	09 f0       	breq	.+2      	; 0x1238 <EXTI_u8SetSenseControl+0x22>
    1236:	5f c0       	rjmp	.+190    	; 0x12f6 <EXTI_u8SetSenseControl+0xe0>
	{
		switch(Copy_u8Sense)
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	39 87       	std	Y+9, r19	; 0x09
    1240:	28 87       	std	Y+8, r18	; 0x08
    1242:	88 85       	ldd	r24, Y+8	; 0x08
    1244:	99 85       	ldd	r25, Y+9	; 0x09
    1246:	82 30       	cpi	r24, 0x02	; 2
    1248:	91 05       	cpc	r25, r1
    124a:	29 f1       	breq	.+74     	; 0x1296 <EXTI_u8SetSenseControl+0x80>
    124c:	28 85       	ldd	r18, Y+8	; 0x08
    124e:	39 85       	ldd	r19, Y+9	; 0x09
    1250:	23 30       	cpi	r18, 0x03	; 3
    1252:	31 05       	cpc	r19, r1
    1254:	34 f4       	brge	.+12     	; 0x1262 <EXTI_u8SetSenseControl+0x4c>
    1256:	88 85       	ldd	r24, Y+8	; 0x08
    1258:	99 85       	ldd	r25, Y+9	; 0x09
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	91 05       	cpc	r25, r1
    125e:	61 f0       	breq	.+24     	; 0x1278 <EXTI_u8SetSenseControl+0x62>
    1260:	47 c0       	rjmp	.+142    	; 0x12f0 <EXTI_u8SetSenseControl+0xda>
    1262:	28 85       	ldd	r18, Y+8	; 0x08
    1264:	39 85       	ldd	r19, Y+9	; 0x09
    1266:	23 30       	cpi	r18, 0x03	; 3
    1268:	31 05       	cpc	r19, r1
    126a:	21 f1       	breq	.+72     	; 0x12b4 <EXTI_u8SetSenseControl+0x9e>
    126c:	88 85       	ldd	r24, Y+8	; 0x08
    126e:	99 85       	ldd	r25, Y+9	; 0x09
    1270:	84 30       	cpi	r24, 0x04	; 4
    1272:	91 05       	cpc	r25, r1
    1274:	71 f1       	breq	.+92     	; 0x12d2 <EXTI_u8SetSenseControl+0xbc>
    1276:	3c c0       	rjmp	.+120    	; 0x12f0 <EXTI_u8SetSenseControl+0xda>
		{
		case LOW_LEVEL : 	CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    1278:	a5 e5       	ldi	r26, 0x55	; 85
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e5 e5       	ldi	r30, 0x55	; 85
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8d 7f       	andi	r24, 0xFD	; 253
    1284:	8c 93       	st	X, r24
    1286:	a5 e5       	ldi	r26, 0x55	; 85
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e5       	ldi	r30, 0x55	; 85
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	8e 7f       	andi	r24, 0xFE	; 254
    1292:	8c 93       	st	X, r24
    1294:	bb c0       	rjmp	.+374    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		case ON_CHANGE : 	CLR_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    1296:	a5 e5       	ldi	r26, 0x55	; 85
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e5 e5       	ldi	r30, 0x55	; 85
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	8d 7f       	andi	r24, 0xFD	; 253
    12a2:	8c 93       	st	X, r24
    12a4:	a5 e5       	ldi	r26, 0x55	; 85
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e5       	ldi	r30, 0x55	; 85
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	8c 93       	st	X, r24
    12b2:	ac c0       	rjmp	.+344    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    12b4:	a5 e5       	ldi	r26, 0x55	; 85
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e5 e5       	ldi	r30, 0x55	; 85
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	82 60       	ori	r24, 0x02	; 2
    12c0:	8c 93       	st	X, r24
    12c2:	a5 e5       	ldi	r26, 0x55	; 85
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e5       	ldi	r30, 0x55	; 85
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8e 7f       	andi	r24, 0xFE	; 254
    12ce:	8c 93       	st	X, r24
    12d0:	9d c0       	rjmp	.+314    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    12d2:	a5 e5       	ldi	r26, 0x55	; 85
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e5       	ldi	r30, 0x55	; 85
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	82 60       	ori	r24, 0x02	; 2
    12de:	8c 93       	st	X, r24
    12e0:	a5 e5       	ldi	r26, 0x55	; 85
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e5       	ldi	r30, 0x55	; 85
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	81 60       	ori	r24, 0x01	; 1
    12ec:	8c 93       	st	X, r24
    12ee:	8e c0       	rjmp	.+284    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		default : Local_u8ErrorState = NOK;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	8b c0       	rjmp	.+278    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8IntNum == EXTI_u8_INT1)
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	09 f0       	breq	.+2      	; 0x12fe <EXTI_u8SetSenseControl+0xe8>
    12fc:	5f c0       	rjmp	.+190    	; 0x13bc <EXTI_u8SetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense)
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3f 83       	std	Y+7, r19	; 0x07
    1306:	2e 83       	std	Y+6, r18	; 0x06
    1308:	8e 81       	ldd	r24, Y+6	; 0x06
    130a:	9f 81       	ldd	r25, Y+7	; 0x07
    130c:	82 30       	cpi	r24, 0x02	; 2
    130e:	91 05       	cpc	r25, r1
    1310:	29 f1       	breq	.+74     	; 0x135c <EXTI_u8SetSenseControl+0x146>
    1312:	2e 81       	ldd	r18, Y+6	; 0x06
    1314:	3f 81       	ldd	r19, Y+7	; 0x07
    1316:	23 30       	cpi	r18, 0x03	; 3
    1318:	31 05       	cpc	r19, r1
    131a:	34 f4       	brge	.+12     	; 0x1328 <EXTI_u8SetSenseControl+0x112>
    131c:	8e 81       	ldd	r24, Y+6	; 0x06
    131e:	9f 81       	ldd	r25, Y+7	; 0x07
    1320:	81 30       	cpi	r24, 0x01	; 1
    1322:	91 05       	cpc	r25, r1
    1324:	61 f0       	breq	.+24     	; 0x133e <EXTI_u8SetSenseControl+0x128>
    1326:	47 c0       	rjmp	.+142    	; 0x13b6 <EXTI_u8SetSenseControl+0x1a0>
    1328:	2e 81       	ldd	r18, Y+6	; 0x06
    132a:	3f 81       	ldd	r19, Y+7	; 0x07
    132c:	23 30       	cpi	r18, 0x03	; 3
    132e:	31 05       	cpc	r19, r1
    1330:	21 f1       	breq	.+72     	; 0x137a <EXTI_u8SetSenseControl+0x164>
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	9f 81       	ldd	r25, Y+7	; 0x07
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	91 05       	cpc	r25, r1
    133a:	71 f1       	breq	.+92     	; 0x1398 <EXTI_u8SetSenseControl+0x182>
    133c:	3c c0       	rjmp	.+120    	; 0x13b6 <EXTI_u8SetSenseControl+0x1a0>
		{
		case LOW_LEVEL : 	CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    133e:	a5 e5       	ldi	r26, 0x55	; 85
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e5       	ldi	r30, 0x55	; 85
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	87 7f       	andi	r24, 0xF7	; 247
    134a:	8c 93       	st	X, r24
    134c:	a5 e5       	ldi	r26, 0x55	; 85
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e5       	ldi	r30, 0x55	; 85
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	8b 7f       	andi	r24, 0xFB	; 251
    1358:	8c 93       	st	X, r24
    135a:	58 c0       	rjmp	.+176    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		case ON_CHANGE : 	CLR_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    135c:	a5 e5       	ldi	r26, 0x55	; 85
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e5 e5       	ldi	r30, 0x55	; 85
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	87 7f       	andi	r24, 0xF7	; 247
    1368:	8c 93       	st	X, r24
    136a:	a5 e5       	ldi	r26, 0x55	; 85
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e5 e5       	ldi	r30, 0x55	; 85
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	84 60       	ori	r24, 0x04	; 4
    1376:	8c 93       	st	X, r24
    1378:	49 c0       	rjmp	.+146    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    137a:	a5 e5       	ldi	r26, 0x55	; 85
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e5 e5       	ldi	r30, 0x55	; 85
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	8c 93       	st	X, r24
    1388:	a5 e5       	ldi	r26, 0x55	; 85
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e5 e5       	ldi	r30, 0x55	; 85
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8b 7f       	andi	r24, 0xFB	; 251
    1394:	8c 93       	st	X, r24
    1396:	3a c0       	rjmp	.+116    	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    1398:	a5 e5       	ldi	r26, 0x55	; 85
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e5       	ldi	r30, 0x55	; 85
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 60       	ori	r24, 0x08	; 8
    13a4:	8c 93       	st	X, r24
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	84 60       	ori	r24, 0x04	; 4
    13b2:	8c 93       	st	X, r24
    13b4:	2b c0       	rjmp	.+86     	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		default : Local_u8ErrorState = NOK;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	28 c0       	rjmp	.+80     	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8IntNum == EXTI_u8_INT2)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	82 30       	cpi	r24, 0x02	; 2
    13c0:	19 f5       	brne	.+70     	; 0x1408 <EXTI_u8SetSenseControl+0x1f2>
	{
		switch(Copy_u8Sense)
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3d 83       	std	Y+5, r19	; 0x05
    13ca:	2c 83       	std	Y+4, r18	; 0x04
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	9d 81       	ldd	r25, Y+5	; 0x05
    13d0:	83 30       	cpi	r24, 0x03	; 3
    13d2:	91 05       	cpc	r25, r1
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <EXTI_u8SetSenseControl+0x1cc>
    13d6:	2c 81       	ldd	r18, Y+4	; 0x04
    13d8:	3d 81       	ldd	r19, Y+5	; 0x05
    13da:	24 30       	cpi	r18, 0x04	; 4
    13dc:	31 05       	cpc	r19, r1
    13de:	49 f0       	breq	.+18     	; 0x13f2 <EXTI_u8SetSenseControl+0x1dc>
    13e0:	10 c0       	rjmp	.+32     	; 0x1402 <EXTI_u8SetSenseControl+0x1ec>
		{
		case FALLING_EDGE : CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
    13e2:	a4 e5       	ldi	r26, 0x54	; 84
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e4 e5       	ldi	r30, 0x54	; 84
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8f 7b       	andi	r24, 0xBF	; 191
    13ee:	8c 93       	st	X, r24
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		case RISING_EDGE :  SET_BIT(MCUCSR,MCUCSR_ISC2); break;
    13f2:	a4 e5       	ldi	r26, 0x54	; 84
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e4 e5       	ldi	r30, 0x54	; 84
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 64       	ori	r24, 0x40	; 64
    13fe:	8c 93       	st	X, r24
    1400:	05 c0       	rjmp	.+10     	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		default : Local_u8ErrorState = NOK;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	02 c0       	rjmp	.+4      	; 0x140c <EXTI_u8SetSenseControl+0x1f6>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
}
    140e:	29 96       	adiw	r28, 0x09	; 9
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <EXTI_u8EnableInt>:
uint8 EXTI_u8EnableInt(uint8 Copy_u8IntNum)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <EXTI_u8EnableInt+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <EXTI_u8EnableInt+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    142e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNum)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3c 83       	std	Y+4, r19	; 0x04
    1438:	2b 83       	std	Y+3, r18	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	89 f0       	breq	.+34     	; 0x1466 <EXTI_u8EnableInt+0x46>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	a1 f0       	breq	.+40     	; 0x1476 <EXTI_u8EnableInt+0x56>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	c1 f4       	brne	.+48     	; 0x1486 <EXTI_u8EnableInt+0x66>
	{
	case EXTI_u8_INT0 : SET_BIT(GICR,GICR_INT0); break;
    1456:	ab e5       	ldi	r26, 0x5B	; 91
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	eb e5       	ldi	r30, 0x5B	; 91
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 64       	ori	r24, 0x40	; 64
    1462:	8c 93       	st	X, r24
    1464:	12 c0       	rjmp	.+36     	; 0x148a <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT1 : SET_BIT(GICR,GICR_INT1); break;
    1466:	ab e5       	ldi	r26, 0x5B	; 91
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	eb e5       	ldi	r30, 0x5B	; 91
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	80 68       	ori	r24, 0x80	; 128
    1472:	8c 93       	st	X, r24
    1474:	0a c0       	rjmp	.+20     	; 0x148a <EXTI_u8EnableInt+0x6a>
	case EXTI_u8_INT2 : SET_BIT(GICR,GICR_INT2); break;
    1476:	ab e5       	ldi	r26, 0x5B	; 91
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	eb e5       	ldi	r30, 0x5B	; 91
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 62       	ori	r24, 0x20	; 32
    1482:	8c 93       	st	X, r24
    1484:	02 c0       	rjmp	.+4      	; 0x148a <EXTI_u8EnableInt+0x6a>
	default : Local_u8ErrorState = NOK;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <EXTI_u8DisableInt>:
uint8 EXTI_u8DisableInt(uint8 Copy_u8IntNum)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <EXTI_u8DisableInt+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <EXTI_u8DisableInt+0x8>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Local_u8ErrorState = OK;
    14a8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8IntNum)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	89 f0       	breq	.+34     	; 0x14e0 <EXTI_u8DisableInt+0x46>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	a1 f0       	breq	.+40     	; 0x14f0 <EXTI_u8DisableInt+0x56>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	c1 f4       	brne	.+48     	; 0x1500 <EXTI_u8DisableInt+0x66>
	{
	case EXTI_u8_INT0 : CLR_BIT(GICR,GICR_INT0); break;
    14d0:	ab e5       	ldi	r26, 0x5B	; 91
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	eb e5       	ldi	r30, 0x5B	; 91
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	8f 7b       	andi	r24, 0xBF	; 191
    14dc:	8c 93       	st	X, r24
    14de:	12 c0       	rjmp	.+36     	; 0x1504 <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT1 : CLR_BIT(GICR,GICR_INT1); break;
    14e0:	ab e5       	ldi	r26, 0x5B	; 91
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	eb e5       	ldi	r30, 0x5B	; 91
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 77       	andi	r24, 0x7F	; 127
    14ec:	8c 93       	st	X, r24
    14ee:	0a c0       	rjmp	.+20     	; 0x1504 <EXTI_u8DisableInt+0x6a>
	case EXTI_u8_INT2 : CLR_BIT(GICR,GICR_INT2); break;
    14f0:	ab e5       	ldi	r26, 0x5B	; 91
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e5       	ldi	r30, 0x5B	; 91
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 7d       	andi	r24, 0xDF	; 223
    14fc:	8c 93       	st	X, r24
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <EXTI_u8DisableInt+0x6a>
	default : Local_u8ErrorState = NOK;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1504:	89 81       	ldd	r24, Y+1	; 0x01
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	cf 91       	pop	r28
    1510:	df 91       	pop	r29
    1512:	08 95       	ret

00001514 <EXTI_u8SetCallBack>:

uint8 EXTI_u8SetCallBack(uint8 Copy_u8IntNum , void (*Copy_pvCallBackFunc)(void))
{
    1514:	df 93       	push	r29
    1516:	cf 93       	push	r28
    1518:	00 d0       	rcall	.+0      	; 0x151a <EXTI_u8SetCallBack+0x6>
    151a:	00 d0       	rcall	.+0      	; 0x151c <EXTI_u8SetCallBack+0x8>
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	8a 83       	std	Y+2, r24	; 0x02
    1522:	7c 83       	std	Y+4, r23	; 0x04
    1524:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1526:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	69 f0       	breq	.+26     	; 0x154a <EXTI_u8SetCallBack+0x36>
	{
		EXTI_pvCallBackFunc[Copy_u8IntNum] = Copy_pvCallBackFunc;
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	fc 01       	movw	r30, r24
    153c:	ec 57       	subi	r30, 0x7C	; 124
    153e:	fe 4f       	sbci	r31, 0xFE	; 254
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	91 83       	std	Z+1, r25	; 0x01
    1546:	80 83       	st	Z, r24
    1548:	02 c0       	rjmp	.+4      	; 0x154e <EXTI_u8SetCallBack+0x3a>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    154e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <__vector_1>:
/*INT0 ISR*/
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    155e:	1f 92       	push	r1
    1560:	0f 92       	push	r0
    1562:	0f b6       	in	r0, 0x3f	; 63
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    1580:	df 93       	push	r29
    1582:	cf 93       	push	r28
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[EXTI_u8_INT0] != NULL)
    1588:	80 91 84 01 	lds	r24, 0x0184
    158c:	90 91 85 01 	lds	r25, 0x0185
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	29 f0       	breq	.+10     	; 0x159e <__vector_1+0x40>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT0]();
    1594:	e0 91 84 01 	lds	r30, 0x0184
    1598:	f0 91 85 01 	lds	r31, 0x0185
    159c:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}
}
    159e:	cf 91       	pop	r28
    15a0:	df 91       	pop	r29
    15a2:	ff 91       	pop	r31
    15a4:	ef 91       	pop	r30
    15a6:	bf 91       	pop	r27
    15a8:	af 91       	pop	r26
    15aa:	9f 91       	pop	r25
    15ac:	8f 91       	pop	r24
    15ae:	7f 91       	pop	r23
    15b0:	6f 91       	pop	r22
    15b2:	5f 91       	pop	r21
    15b4:	4f 91       	pop	r20
    15b6:	3f 91       	pop	r19
    15b8:	2f 91       	pop	r18
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	0f 90       	pop	r0
    15c0:	1f 90       	pop	r1
    15c2:	18 95       	reti

000015c4 <__vector_2>:
/*INT0 ISR*/
void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	2f 93       	push	r18
    15d0:	3f 93       	push	r19
    15d2:	4f 93       	push	r20
    15d4:	5f 93       	push	r21
    15d6:	6f 93       	push	r22
    15d8:	7f 93       	push	r23
    15da:	8f 93       	push	r24
    15dc:	9f 93       	push	r25
    15de:	af 93       	push	r26
    15e0:	bf 93       	push	r27
    15e2:	ef 93       	push	r30
    15e4:	ff 93       	push	r31
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[EXTI_u8_INT1] != NULL)
    15ee:	80 91 86 01 	lds	r24, 0x0186
    15f2:	90 91 87 01 	lds	r25, 0x0187
    15f6:	00 97       	sbiw	r24, 0x00	; 0
    15f8:	29 f0       	breq	.+10     	; 0x1604 <__vector_2+0x40>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT1]();
    15fa:	e0 91 86 01 	lds	r30, 0x0186
    15fe:	f0 91 87 01 	lds	r31, 0x0187
    1602:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}}
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	ff 91       	pop	r31
    160a:	ef 91       	pop	r30
    160c:	bf 91       	pop	r27
    160e:	af 91       	pop	r26
    1610:	9f 91       	pop	r25
    1612:	8f 91       	pop	r24
    1614:	7f 91       	pop	r23
    1616:	6f 91       	pop	r22
    1618:	5f 91       	pop	r21
    161a:	4f 91       	pop	r20
    161c:	3f 91       	pop	r19
    161e:	2f 91       	pop	r18
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	0f 90       	pop	r0
    1626:	1f 90       	pop	r1
    1628:	18 95       	reti

0000162a <__vector_3>:
/*INT0 ISR*/
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    162a:	1f 92       	push	r1
    162c:	0f 92       	push	r0
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	0f 92       	push	r0
    1632:	11 24       	eor	r1, r1
    1634:	2f 93       	push	r18
    1636:	3f 93       	push	r19
    1638:	4f 93       	push	r20
    163a:	5f 93       	push	r21
    163c:	6f 93       	push	r22
    163e:	7f 93       	push	r23
    1640:	8f 93       	push	r24
    1642:	9f 93       	push	r25
    1644:	af 93       	push	r26
    1646:	bf 93       	push	r27
    1648:	ef 93       	push	r30
    164a:	ff 93       	push	r31
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvCallBackFunc[EXTI_u8_INT2] != NULL)
    1654:	80 91 88 01 	lds	r24, 0x0188
    1658:	90 91 89 01 	lds	r25, 0x0189
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	29 f0       	breq	.+10     	; 0x166a <__vector_3+0x40>
	{
		EXTI_pvCallBackFunc[EXTI_u8_INT2]();
    1660:	e0 91 88 01 	lds	r30, 0x0188
    1664:	f0 91 89 01 	lds	r31, 0x0189
    1668:	09 95       	icall
	}
	else
	{
		/*Do nothing*/
	}}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	0f 90       	pop	r0
    168c:	1f 90       	pop	r1
    168e:	18 95       	reti

00001690 <GIE_voidEnableGlobal>:
#include "../../UTIL/STD_TYPES.h"
#include "../../UTIL/BIT_MATH.h"


void GIE_voidEnableGlobal(void)
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
	__asm volatile("SEI");
    1698:	78 94       	sei
}
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <GIE_voidDisableGlobal>:

void GIE_voidDisableGlobal(void)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
	__asm volatile("CLI");
    16a8:	f8 94       	cli
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <DIO_u8SetPinValue>:
#include "../UTIL/ERR_TYPE.h"

#include "DIO_interface.h"
#include "DIO_reg.h"
uint8 DIO_u8SetPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8 Copy_u8Val)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <DIO_u8SetPinValue+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_u8SetPinValue+0x8>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_u8SetPinValue+0xa>
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	8a 83       	std	Y+2, r24	; 0x02
    16c0:	6b 83       	std	Y+3, r22	; 0x03
    16c2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    16c4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinNum <= DIO_u8_PIN7)&& (Copy_u8Val <= DIO_u8_PIN_HIGH)){
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 30       	cpi	r24, 0x08	; 8
    16ca:	08 f0       	brcs	.+2      	; 0x16ce <DIO_u8SetPinValue+0x1e>
    16cc:	b1 c0       	rjmp	.+354    	; 0x1830 <DIO_u8SetPinValue+0x180>
    16ce:	8c 81       	ldd	r24, Y+4	; 0x04
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	08 f0       	brcs	.+2      	; 0x16d6 <DIO_u8SetPinValue+0x26>
    16d4:	ad c0       	rjmp	.+346    	; 0x1830 <DIO_u8SetPinValue+0x180>
		switch(Copy_u8Port)
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	3e 83       	std	Y+6, r19	; 0x06
    16de:	2d 83       	std	Y+5, r18	; 0x05
    16e0:	6d 81       	ldd	r22, Y+5	; 0x05
    16e2:	7e 81       	ldd	r23, Y+6	; 0x06
    16e4:	61 30       	cpi	r22, 0x01	; 1
    16e6:	71 05       	cpc	r23, r1
    16e8:	d1 f1       	breq	.+116    	; 0x175e <DIO_u8SetPinValue+0xae>
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	82 30       	cpi	r24, 0x02	; 2
    16f0:	91 05       	cpc	r25, r1
    16f2:	34 f4       	brge	.+12     	; 0x1700 <DIO_u8SetPinValue+0x50>
    16f4:	2d 81       	ldd	r18, Y+5	; 0x05
    16f6:	3e 81       	ldd	r19, Y+6	; 0x06
    16f8:	21 15       	cp	r18, r1
    16fa:	31 05       	cpc	r19, r1
    16fc:	71 f0       	breq	.+28     	; 0x171a <DIO_u8SetPinValue+0x6a>
    16fe:	95 c0       	rjmp	.+298    	; 0x182a <DIO_u8SetPinValue+0x17a>
    1700:	6d 81       	ldd	r22, Y+5	; 0x05
    1702:	7e 81       	ldd	r23, Y+6	; 0x06
    1704:	62 30       	cpi	r22, 0x02	; 2
    1706:	71 05       	cpc	r23, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <DIO_u8SetPinValue+0x5c>
    170a:	4b c0       	rjmp	.+150    	; 0x17a2 <DIO_u8SetPinValue+0xf2>
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	91 05       	cpc	r25, r1
    1714:	09 f4       	brne	.+2      	; 0x1718 <DIO_u8SetPinValue+0x68>
    1716:	67 c0       	rjmp	.+206    	; 0x17e6 <DIO_u8SetPinValue+0x136>
    1718:	88 c0       	rjmp	.+272    	; 0x182a <DIO_u8SetPinValue+0x17a>
		{
			case DIO_u8_PORTA : ASSIGN_BIT(PORTA,Copy_u8PinNum,Copy_u8Val); break;
    171a:	ab e3       	ldi	r26, 0x3B	; 59
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	eb e3       	ldi	r30, 0x3B	; 59
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_u8SetPinValue+0x86>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	2a 95       	dec	r18
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_u8SetPinValue+0x82>
    173a:	80 95       	com	r24
    173c:	48 23       	and	r20, r24
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	88 2f       	mov	r24, r24
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	b9 01       	movw	r22, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_u8SetPinValue+0xa2>
    174e:	66 0f       	add	r22, r22
    1750:	77 1f       	adc	r23, r23
    1752:	8a 95       	dec	r24
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_u8SetPinValue+0x9e>
    1756:	cb 01       	movw	r24, r22
    1758:	84 2b       	or	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	6b c0       	rjmp	.+214    	; 0x1834 <DIO_u8SetPinValue+0x184>
			case DIO_u8_PORTB : ASSIGN_BIT(PORTB,Copy_u8PinNum,Copy_u8Val); break;
    175e:	a8 e3       	ldi	r26, 0x38	; 56
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e8 e3       	ldi	r30, 0x38	; 56
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <DIO_u8SetPinValue+0xca>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	2a 95       	dec	r18
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <DIO_u8SetPinValue+0xc6>
    177e:	80 95       	com	r24
    1780:	48 23       	and	r20, r24
    1782:	8c 81       	ldd	r24, Y+4	; 0x04
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	b9 01       	movw	r22, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_u8SetPinValue+0xe6>
    1792:	66 0f       	add	r22, r22
    1794:	77 1f       	adc	r23, r23
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_u8SetPinValue+0xe2>
    179a:	cb 01       	movw	r24, r22
    179c:	84 2b       	or	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	49 c0       	rjmp	.+146    	; 0x1834 <DIO_u8SetPinValue+0x184>
			case DIO_u8_PORTC : ASSIGN_BIT(PORTC,Copy_u8PinNum,Copy_u8Val); break;
    17a2:	a5 e3       	ldi	r26, 0x35	; 53
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e5 e3       	ldi	r30, 0x35	; 53
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_u8SetPinValue+0x10e>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	2a 95       	dec	r18
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_u8SetPinValue+0x10a>
    17c2:	80 95       	com	r24
    17c4:	48 23       	and	r20, r24
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	b9 01       	movw	r22, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_u8SetPinValue+0x12a>
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_u8SetPinValue+0x126>
    17de:	cb 01       	movw	r24, r22
    17e0:	84 2b       	or	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	27 c0       	rjmp	.+78     	; 0x1834 <DIO_u8SetPinValue+0x184>
			case DIO_u8_PORTD : ASSIGN_BIT(PORTD,Copy_u8PinNum,Copy_u8Val); break;
    17e6:	a2 e3       	ldi	r26, 0x32	; 50
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e2 e3       	ldi	r30, 0x32	; 50
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_u8SetPinValue+0x152>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	2a 95       	dec	r18
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_u8SetPinValue+0x14e>
    1806:	80 95       	com	r24
    1808:	48 23       	and	r20, r24
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	b9 01       	movw	r22, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_u8SetPinValue+0x16e>
    181a:	66 0f       	add	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	8a 95       	dec	r24
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_u8SetPinValue+0x16a>
    1822:	cb 01       	movw	r24, r22
    1824:	84 2b       	or	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	05 c0       	rjmp	.+10     	; 0x1834 <DIO_u8SetPinValue+0x184>
			default : Local_u8ErrorState = NOK; break;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <DIO_u8SetPinValue+0x184>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1834:	89 81       	ldd	r24, Y+1	; 0x01
}
    1836:	26 96       	adiw	r28, 0x06	; 6
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <DIO_u8SetPortValue>:

uint8 DIO_u8SetPortValue(uint8 Copy_u8Port,uint8 Copy_u8Val)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <DIO_u8SetPortValue+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <DIO_u8SetPortValue+0x8>
    1850:	0f 92       	push	r0
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	8a 83       	std	Y+2, r24	; 0x02
    1858:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    185a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3d 83       	std	Y+5, r19	; 0x05
    1864:	2c 83       	std	Y+4, r18	; 0x04
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	d1 f0       	breq	.+52     	; 0x18a4 <DIO_u8SetPortValue+0x5c>
    1870:	2c 81       	ldd	r18, Y+4	; 0x04
    1872:	3d 81       	ldd	r19, Y+5	; 0x05
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	2c f4       	brge	.+10     	; 0x1884 <DIO_u8SetPortValue+0x3c>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	61 f0       	breq	.+24     	; 0x189a <DIO_u8SetPortValue+0x52>
    1882:	1f c0       	rjmp	.+62     	; 0x18c2 <DIO_u8SetPortValue+0x7a>
    1884:	2c 81       	ldd	r18, Y+4	; 0x04
    1886:	3d 81       	ldd	r19, Y+5	; 0x05
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	81 f0       	breq	.+32     	; 0x18ae <DIO_u8SetPortValue+0x66>
    188e:	8c 81       	ldd	r24, Y+4	; 0x04
    1890:	9d 81       	ldd	r25, Y+5	; 0x05
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	81 f0       	breq	.+32     	; 0x18b8 <DIO_u8SetPortValue+0x70>
    1898:	14 c0       	rjmp	.+40     	; 0x18c2 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8_PORTA : PORTA = Copy_u8Val; break;
    189a:	eb e3       	ldi	r30, 0x3B	; 59
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	80 83       	st	Z, r24
    18a2:	11 c0       	rjmp	.+34     	; 0x18c6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB : PORTB = Copy_u8Val; break;
    18a4:	e8 e3       	ldi	r30, 0x38	; 56
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8b 81       	ldd	r24, Y+3	; 0x03
    18aa:	80 83       	st	Z, r24
    18ac:	0c c0       	rjmp	.+24     	; 0x18c6 <DIO_u8SetPortValue+0x7e>
 		case DIO_u8_PORTC : PORTC = Copy_u8Val; break;
    18ae:	e5 e3       	ldi	r30, 0x35	; 53
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	80 83       	st	Z, r24
    18b6:	07 c0       	rjmp	.+14     	; 0x18c6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD : PORTD = Copy_u8Val; break;
    18b8:	e2 e3       	ldi	r30, 0x32	; 50
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	80 83       	st	Z, r24
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_u8SetPortValue+0x7e>
		default : Local_u8ErrorState = NOK; break;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18c8:	0f 90       	pop	r0
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <DIO_u8ReadPinValue>:

uint8 DIO_u8ReadPinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum,uint8* Copy_pu8Val)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	27 97       	sbiw	r28, 0x07	; 7
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	6b 83       	std	Y+3, r22	; 0x03
    18f0:	5d 83       	std	Y+5, r21	; 0x05
    18f2:	4c 83       	std	Y+4, r20	; 0x04
	uint8 Local_u8ErrorState = OK;
    18f4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinNum <= DIO_u8_PIN7) && (Copy_pu8Val != NULL)){
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	88 30       	cpi	r24, 0x08	; 8
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <DIO_u8ReadPinValue+0x26>
    18fc:	79 c0       	rjmp	.+242    	; 0x19f0 <DIO_u8ReadPinValue+0x118>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	09 f4       	brne	.+2      	; 0x1908 <DIO_u8ReadPinValue+0x30>
    1906:	74 c0       	rjmp	.+232    	; 0x19f0 <DIO_u8ReadPinValue+0x118>
		switch(Copy_u8Port)
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	3f 83       	std	Y+7, r19	; 0x07
    1910:	2e 83       	std	Y+6, r18	; 0x06
    1912:	4e 81       	ldd	r20, Y+6	; 0x06
    1914:	5f 81       	ldd	r21, Y+7	; 0x07
    1916:	41 30       	cpi	r20, 0x01	; 1
    1918:	51 05       	cpc	r21, r1
    191a:	59 f1       	breq	.+86     	; 0x1972 <DIO_u8ReadPinValue+0x9a>
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	9f 81       	ldd	r25, Y+7	; 0x07
    1920:	82 30       	cpi	r24, 0x02	; 2
    1922:	91 05       	cpc	r25, r1
    1924:	34 f4       	brge	.+12     	; 0x1932 <DIO_u8ReadPinValue+0x5a>
    1926:	2e 81       	ldd	r18, Y+6	; 0x06
    1928:	3f 81       	ldd	r19, Y+7	; 0x07
    192a:	21 15       	cp	r18, r1
    192c:	31 05       	cpc	r19, r1
    192e:	69 f0       	breq	.+26     	; 0x194a <DIO_u8ReadPinValue+0x72>
    1930:	5c c0       	rjmp	.+184    	; 0x19ea <DIO_u8ReadPinValue+0x112>
    1932:	4e 81       	ldd	r20, Y+6	; 0x06
    1934:	5f 81       	ldd	r21, Y+7	; 0x07
    1936:	42 30       	cpi	r20, 0x02	; 2
    1938:	51 05       	cpc	r21, r1
    193a:	79 f1       	breq	.+94     	; 0x199a <DIO_u8ReadPinValue+0xc2>
    193c:	8e 81       	ldd	r24, Y+6	; 0x06
    193e:	9f 81       	ldd	r25, Y+7	; 0x07
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <DIO_u8ReadPinValue+0x70>
    1946:	3d c0       	rjmp	.+122    	; 0x19c2 <DIO_u8ReadPinValue+0xea>
    1948:	50 c0       	rjmp	.+160    	; 0x19ea <DIO_u8ReadPinValue+0x112>
		{
			case DIO_u8_PORTA : *Copy_pu8Val = GET_BIT(PINA,Copy_u8PinNum); break;
    194a:	e9 e3       	ldi	r30, 0x39	; 57
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a9 01       	movw	r20, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_u8ReadPinValue+0x8a>
    195e:	55 95       	asr	r21
    1960:	47 95       	ror	r20
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_u8ReadPinValue+0x86>
    1966:	ca 01       	movw	r24, r20
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	ec 81       	ldd	r30, Y+4	; 0x04
    196c:	fd 81       	ldd	r31, Y+5	; 0x05
    196e:	80 83       	st	Z, r24
    1970:	48 c0       	rjmp	.+144    	; 0x1a02 <DIO_u8ReadPinValue+0x12a>
			case DIO_u8_PORTB : *Copy_pu8Val = GET_BIT(PINB,Copy_u8PinNum); break;
    1972:	e6 e3       	ldi	r30, 0x36	; 54
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_u8ReadPinValue+0xb2>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_u8ReadPinValue+0xae>
    198e:	ca 01       	movw	r24, r20
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	ec 81       	ldd	r30, Y+4	; 0x04
    1994:	fd 81       	ldd	r31, Y+5	; 0x05
    1996:	80 83       	st	Z, r24
    1998:	34 c0       	rjmp	.+104    	; 0x1a02 <DIO_u8ReadPinValue+0x12a>
			case DIO_u8_PORTC : *Copy_pu8Val = GET_BIT(PINC,Copy_u8PinNum); break;
    199a:	e3 e3       	ldi	r30, 0x33	; 51
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	88 2f       	mov	r24, r24
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a9 01       	movw	r20, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <DIO_u8ReadPinValue+0xda>
    19ae:	55 95       	asr	r21
    19b0:	47 95       	ror	r20
    19b2:	8a 95       	dec	r24
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <DIO_u8ReadPinValue+0xd6>
    19b6:	ca 01       	movw	r24, r20
    19b8:	81 70       	andi	r24, 0x01	; 1
    19ba:	ec 81       	ldd	r30, Y+4	; 0x04
    19bc:	fd 81       	ldd	r31, Y+5	; 0x05
    19be:	80 83       	st	Z, r24
    19c0:	20 c0       	rjmp	.+64     	; 0x1a02 <DIO_u8ReadPinValue+0x12a>
			case DIO_u8_PORTD : *Copy_pu8Val = GET_BIT(PIND,Copy_u8PinNum); break;
    19c2:	e0 e3       	ldi	r30, 0x30	; 48
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	a9 01       	movw	r20, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <DIO_u8ReadPinValue+0x102>
    19d6:	55 95       	asr	r21
    19d8:	47 95       	ror	r20
    19da:	8a 95       	dec	r24
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <DIO_u8ReadPinValue+0xfe>
    19de:	ca 01       	movw	r24, r20
    19e0:	81 70       	andi	r24, 0x01	; 1
    19e2:	ec 81       	ldd	r30, Y+4	; 0x04
    19e4:	fd 81       	ldd	r31, Y+5	; 0x05
    19e6:	80 83       	st	Z, r24
    19e8:	0c c0       	rjmp	.+24     	; 0x1a02 <DIO_u8ReadPinValue+0x12a>
			default : Local_u8ErrorState = NOK; break;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	09 c0       	rjmp	.+18     	; 0x1a02 <DIO_u8ReadPinValue+0x12a>
		}
	}
	else if(Copy_pu8Val == NULL)
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	9d 81       	ldd	r25, Y+5	; 0x05
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	19 f4       	brne	.+6      	; 0x19fe <DIO_u8ReadPinValue+0x126>
	{
		Local_u8ErrorState  = NULL_POINTER;
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <DIO_u8ReadPinValue+0x12a>
	}
	else
	{
		Local_u8ErrorState = NOK;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a04:	27 96       	adiw	r28, 0x07	; 7
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <DIO_u8TogglePinValue>:

uint8 DIO_u8TogglePinValue(uint8 Copy_u8Port,uint8 Copy_u8PinNum)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <DIO_u8TogglePinValue+0x6>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <DIO_u8TogglePinValue+0x8>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	8a 83       	std	Y+2, r24	; 0x02
    1a26:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8ErrorState = OK;
    1a28:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PinNum <= DIO_u8_PIN7){
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 30       	cpi	r24, 0x08	; 8
    1a2e:	08 f0       	brcs	.+2      	; 0x1a32 <DIO_u8TogglePinValue+0x1c>
    1a30:	72 c0       	rjmp	.+228    	; 0x1b16 <DIO_u8TogglePinValue+0x100>
		switch(Copy_u8Port)
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	3d 83       	std	Y+5, r19	; 0x05
    1a3a:	2c 83       	std	Y+4, r18	; 0x04
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	91 05       	cpc	r25, r1
    1a44:	49 f1       	breq	.+82     	; 0x1a98 <DIO_u8TogglePinValue+0x82>
    1a46:	2c 81       	ldd	r18, Y+4	; 0x04
    1a48:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4a:	22 30       	cpi	r18, 0x02	; 2
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <DIO_u8TogglePinValue+0x44>
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	61 f0       	breq	.+24     	; 0x1a70 <DIO_u8TogglePinValue+0x5a>
    1a58:	5b c0       	rjmp	.+182    	; 0x1b10 <DIO_u8TogglePinValue+0xfa>
    1a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5e:	22 30       	cpi	r18, 0x02	; 2
    1a60:	31 05       	cpc	r19, r1
    1a62:	71 f1       	breq	.+92     	; 0x1ac0 <DIO_u8TogglePinValue+0xaa>
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	83 30       	cpi	r24, 0x03	; 3
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	e9 f1       	breq	.+122    	; 0x1ae8 <DIO_u8TogglePinValue+0xd2>
    1a6e:	50 c0       	rjmp	.+160    	; 0x1b10 <DIO_u8TogglePinValue+0xfa>
		{
			case DIO_u8_PORTA : TOG_BIT(PORTA,Copy_u8PinNum); break;
    1a70:	ab e3       	ldi	r26, 0x3B	; 59
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	eb e3       	ldi	r30, 0x3B	; 59
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <DIO_u8TogglePinValue+0x78>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <DIO_u8TogglePinValue+0x74>
    1a92:	84 27       	eor	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	41 c0       	rjmp	.+130    	; 0x1b1a <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTB : TOG_BIT(PORTB,Copy_u8PinNum); break;
    1a98:	a8 e3       	ldi	r26, 0x38	; 56
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e8 e3       	ldi	r30, 0x38	; 56
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_u8TogglePinValue+0xa0>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_u8TogglePinValue+0x9c>
    1aba:	84 27       	eor	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	2d c0       	rjmp	.+90     	; 0x1b1a <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTC : TOG_BIT(PORTC,Copy_u8PinNum); break;
    1ac0:	a5 e3       	ldi	r26, 0x35	; 53
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e5 e3       	ldi	r30, 0x35	; 53
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_u8TogglePinValue+0xc8>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_u8TogglePinValue+0xc4>
    1ae2:	84 27       	eor	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	19 c0       	rjmp	.+50     	; 0x1b1a <DIO_u8TogglePinValue+0x104>
			case DIO_u8_PORTD : TOG_BIT(PORTD,Copy_u8PinNum); break;
    1ae8:	a2 e3       	ldi	r26, 0x32	; 50
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e2 e3       	ldi	r30, 0x32	; 50
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_u8TogglePinValue+0xf0>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_u8TogglePinValue+0xec>
    1b0a:	84 27       	eor	r24, r20
    1b0c:	8c 93       	st	X, r24
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <DIO_u8TogglePinValue+0x104>
			default : Local_u8ErrorState = NOK; break;
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	02 c0       	rjmp	.+4      	; 0x1b1a <DIO_u8TogglePinValue+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <PORT_voidInit>:
#include "PORT_config.h"
#include "PORT_private.h"
#include "PORT_interface.h"
#include "PORT_reg.h"

void PORT_voidInit(void){
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1b34:	ea e3       	ldi	r30, 0x3A	; 58
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1b3c:	e7 e3       	ldi	r30, 0x37	; 55
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	8f ef       	ldi	r24, 0xFF	; 255
    1b42:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1b44:	e4 e3       	ldi	r30, 0x34	; 52
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8f ef       	ldi	r24, 0xFF	; 255
    1b4a:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1b4c:	e1 e3       	ldi	r30, 0x31	; 49
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8f eb       	ldi	r24, 0xBF	; 191
    1b52:	80 83       	st	Z, r24

	PORTA = PORTA_INIT_VAL;
    1b54:	eb e3       	ldi	r30, 0x3B	; 59
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	10 82       	st	Z, r1
	PORTB = PORTB_INIT_VAL;
    1b5a:	e8 e3       	ldi	r30, 0x38	; 56
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	10 82       	st	Z, r1
	PORTC = PORTC_INIT_VAL;
    1b60:	e5 e3       	ldi	r30, 0x35	; 53
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	10 82       	st	Z, r1
	PORTD = PORTD_INIT_VAL;
    1b66:	e2 e3       	ldi	r30, 0x32	; 50
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	10 82       	st	Z, r1
}
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <USS_voidInit>:

static uint16 volatile TIMER1_OVER_FLOW = 0;



void USS_voidInit(void){
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	cd b7       	in	r28, 0x3d	; 61
    1b78:	de b7       	in	r29, 0x3e	; 62
	GIE_voidEnableGlobal(); //  enable global intterupt
    1b7a:	0e 94 48 0b 	call	0x1690	; 0x1690 <GIE_voidEnableGlobal>
	TIMEROvf_u8Enable(TIMER1); // enable over flow interrupt for timer 1
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	0e 94 56 07 	call	0xeac	; 0xeac <TIMEROvf_u8Enable>
	TCCR1A = 0; // normal counter no compare or PWM
    1b84:	ef e4       	ldi	r30, 0x4F	; 79
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	10 82       	st	Z, r1
}
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <setICP_RisingEdge>:


void setICP_RisingEdge(){
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
	/* wait for rising edge on USS_ECHO pin (input capture pin ICP1)*/
	/* change bits of timer counter control 1 */
	SET_BIT(TCCR1B, TCCR1B_ICES1); /* set capture on rising edge */
    1b98:	ae e4       	ldi	r26, 0x4E	; 78
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	ee e4       	ldi	r30, 0x4E	; 78
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 64       	ori	r24, 0x40	; 64
    1ba4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS10); /* start timer with no prescaler */
    1ba6:	ae e4       	ldi	r26, 0x4E	; 78
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ee e4       	ldi	r30, 0x4E	; 78
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	81 60       	ori	r24, 0x01	; 1
    1bb2:	8c 93       	st	X, r24
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <setICP_FallingEdge>:


void setICP_FallingEdge(){
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, TCCR1B_ICES1); // Capture on falling edge
    1bc2:	ae e4       	ldi	r26, 0x4E	; 78
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	ee e4       	ldi	r30, 0x4E	; 78
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	8f 7b       	andi	r24, 0xBF	; 191
    1bce:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, TCCR1B_CS10); // start count no prescaler
    1bd0:	ae e4       	ldi	r26, 0x4E	; 78
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	ee e4       	ldi	r30, 0x4E	; 78
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	81 60       	ori	r24, 0x01	; 1
    1bdc:	8c 93       	st	X, r24
}
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <stopTimer1>:

void stopTimer1(){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR1B, TCCR1B_CS10);
    1bec:	ae e4       	ldi	r26, 0x4E	; 78
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ee e4       	ldi	r30, 0x4E	; 78
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8e 7f       	andi	r24, 0xFE	; 254
    1bf8:	8c 93       	st	X, r24
}
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <Clear_Timer1Flags>:

void Clear_Timer1Flags(){
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
	/* clear flags */
	SET_BIT(TIFR, TIFR_ICF1); /* Clear ICP flag (Input Capture flag) */
    1c08:	a8 e5       	ldi	r26, 0x58	; 88
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e8 e5       	ldi	r30, 0x58	; 88
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	80 62       	ori	r24, 0x20	; 32
    1c14:	8c 93       	st	X, r24
	SET_BIT(TIFR, TIFR_TOV1); /* Clear Timer Overflow flag */
    1c16:	a8 e5       	ldi	r26, 0x58	; 88
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e8 e5       	ldi	r30, 0x58	; 88
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	84 60       	ori	r24, 0x04	; 4
    1c22:	8c 93       	st	X, r24
}
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <calcuteDistance>:


uint32 calcuteDistance(){
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <calcuteDistance+0x6>
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <calcuteDistance+0x8>
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62

		 trigger pin DIO_u8_PORTA
		 */

	/* current count */
	uint32 count  = (uint16)ICR1L;
    1c36:	e6 e4       	ldi	r30, 0x46	; 70
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a0 e0       	ldi	r26, 0x00	; 0
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	9a 83       	std	Y+2, r25	; 0x02
    1c48:	ab 83       	std	Y+3, r26	; 0x03
    1c4a:	bc 83       	std	Y+4, r27	; 0x04
	//count = count | (ICR1H << 8);

	count += TIMER1_MAX_COUNT * TIMER1_OVER_FLOW;
    1c4c:	80 91 8a 01 	lds	r24, 0x018A
    1c50:	90 91 8b 01 	lds	r25, 0x018B
    1c54:	cc 01       	movw	r24, r24
    1c56:	a0 e0       	ldi	r26, 0x00	; 0
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	2f ef       	ldi	r18, 0xFF	; 255
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	50 e0       	ldi	r21, 0x00	; 0
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsi3>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9c 01       	movw	r18, r24
    1c70:	ad 01       	movw	r20, r26
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	ab 81       	ldd	r26, Y+3	; 0x03
    1c78:	bc 81       	ldd	r27, Y+4	; 0x04
    1c7a:	82 0f       	add	r24, r18
    1c7c:	93 1f       	adc	r25, r19
    1c7e:	a4 1f       	adc	r26, r20
    1c80:	b5 1f       	adc	r27, r21
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	ab 83       	std	Y+3, r26	; 0x03
    1c88:	bc 83       	std	Y+4, r27	; 0x04

	return (uint32)((float32)count / 923.94);
    1c8a:	69 81       	ldd	r22, Y+1	; 0x01
    1c8c:	7a 81       	ldd	r23, Y+2	; 0x02
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	29 e2       	ldi	r18, 0x29	; 41
    1ca0:	3c ef       	ldi	r19, 0xFC	; 252
    1ca2:	46 e6       	ldi	r20, 0x66	; 102
    1ca4:	54 e4       	ldi	r21, 0x44	; 68
    1ca6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
}
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <USS_u32GetDistance>:


uint32 USS_u32GetDistance(void){
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	68 97       	sbiw	r28, 0x18	; 24
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	de bf       	out	0x3e, r29	; 62
    1cdc:	0f be       	out	0x3f, r0	; 63
    1cde:	cd bf       	out	0x3d, r28	; 61
		 timer 1 over flow is enabled
		 register TCCR1A set as normal operation i.e. TCCR1A = 0;
	 * */

	/* send 10us pulse to trigger pin */
	DIO_u8SetPinValue(USS_u8_TRIGGER_PORT, USS_u8_TRIGGER_PIN, DIO_u8_PIN_HIGH);
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	41 e0       	ldi	r20, 0x01	; 1
    1ce6:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a0 e2       	ldi	r26, 0x20	; 32
    1cf0:	b1 e4       	ldi	r27, 0x41	; 65
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15
    1cf4:	9e 8b       	std	Y+22, r25	; 0x16
    1cf6:	af 8b       	std	Y+23, r26	; 0x17
    1cf8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	2b ea       	ldi	r18, 0xAB	; 171
    1d04:	3a ea       	ldi	r19, 0xAA	; 170
    1d06:	4a ea       	ldi	r20, 0xAA	; 170
    1d08:	50 e4       	ldi	r21, 0x40	; 64
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	89 8b       	std	Y+17, r24	; 0x11
    1d14:	9a 8b       	std	Y+18, r25	; 0x12
    1d16:	ab 8b       	std	Y+19, r26	; 0x13
    1d18:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d1a:	69 89       	ldd	r22, Y+17	; 0x11
    1d1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d20:	9c 89       	ldd	r25, Y+20	; 0x14
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2e:	88 23       	and	r24, r24
    1d30:	1c f4       	brge	.+6      	; 0x1d38 <USS_u32GetDistance+0x6c>
		__ticks = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	88 8b       	std	Y+16, r24	; 0x10
    1d36:	91 c0       	rjmp	.+290    	; 0x1e5a <USS_u32GetDistance+0x18e>
	else if (__tmp > 255)
    1d38:	69 89       	ldd	r22, Y+17	; 0x11
    1d3a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	53 e4       	ldi	r21, 0x43	; 67
    1d48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	0c f0       	brlt	.+2      	; 0x1d52 <USS_u32GetDistance+0x86>
    1d50:	7b c0       	rjmp	.+246    	; 0x1e48 <USS_u32GetDistance+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1d52:	6d 89       	ldd	r22, Y+21	; 0x15
    1d54:	7e 89       	ldd	r23, Y+22	; 0x16
    1d56:	8f 89       	ldd	r24, Y+23	; 0x17
    1d58:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8c 87       	std	Y+12, r24	; 0x0c
    1d6c:	9d 87       	std	Y+13, r25	; 0x0d
    1d6e:	ae 87       	std	Y+14, r26	; 0x0e
    1d70:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	55 e4       	ldi	r21, 0x45	; 69
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	88 87       	std	Y+8, r24	; 0x08
    1d8c:	99 87       	std	Y+9, r25	; 0x09
    1d8e:	aa 87       	std	Y+10, r26	; 0x0a
    1d90:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d92:	68 85       	ldd	r22, Y+8	; 0x08
    1d94:	79 85       	ldd	r23, Y+9	; 0x09
    1d96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <USS_u32GetDistance+0xe8>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9f 83       	std	Y+7, r25	; 0x07
    1db0:	8e 83       	std	Y+6, r24	; 0x06
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <USS_u32GetDistance+0x166>
	else if (__tmp > 65535)
    1db4:	68 85       	ldd	r22, Y+8	; 0x08
    1db6:	79 85       	ldd	r23, Y+9	; 0x09
    1db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dba:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <USS_u32GetDistance+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6c 85       	ldd	r22, Y+12	; 0x0c
    1dce:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dd0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9f 83       	std	Y+7, r25	; 0x07
    1df2:	8e 83       	std	Y+6, r24	; 0x06
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <USS_u32GetDistance+0x148>
    1df6:	80 e9       	ldi	r24, 0x90	; 144
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	9d 83       	std	Y+5, r25	; 0x05
    1dfc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfe:	8c 81       	ldd	r24, Y+4	; 0x04
    1e00:	9d 81       	ldd	r25, Y+5	; 0x05
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <USS_u32GetDistance+0x136>
    1e06:	9d 83       	std	Y+5, r25	; 0x05
    1e08:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	9f 83       	std	Y+7, r25	; 0x07
    1e12:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8e 81       	ldd	r24, Y+6	; 0x06
    1e16:	9f 81       	ldd	r25, Y+7	; 0x07
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <USS_u32GetDistance+0x12a>
    1e1c:	24 c0       	rjmp	.+72     	; 0x1e66 <USS_u32GetDistance+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	68 85       	ldd	r22, Y+8	; 0x08
    1e20:	79 85       	ldd	r23, Y+9	; 0x09
    1e22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	9f 83       	std	Y+7, r25	; 0x07
    1e30:	8e 83       	std	Y+6, r24	; 0x06
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	9b 83       	std	Y+3, r25	; 0x03
    1e38:	8a 83       	std	Y+2, r24	; 0x02
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <USS_u32GetDistance+0x172>
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <USS_u32GetDistance+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e48:	69 89       	ldd	r22, Y+17	; 0x11
    1e4a:	7a 89       	ldd	r23, Y+18	; 0x12
    1e4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	88 8b       	std	Y+16, r24	; 0x10
    1e5a:	88 89       	ldd	r24, Y+16	; 0x10
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	8a 95       	dec	r24
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <USS_u32GetDistance+0x194>
    1e64:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_u8SetPinValue(USS_u8_TRIGGER_PORT, USS_u8_TRIGGER_PIN, DIO_u8_PIN_LOW);
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	60 e0       	ldi	r22, 0x00	; 0
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>

	TCNT1H = 0;	/* Clear Timer1 counter */
    1e70:	ed e4       	ldi	r30, 0x4D	; 77
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	10 82       	st	Z, r1
	TCNT1L = 0;
    1e76:	ec e4       	ldi	r30, 0x4C	; 76
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	10 82       	st	Z, r1

	setICP_RisingEdge(); /* set capture on rising edge and start timer */
    1e7c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <setICP_RisingEdge>
	Clear_Timer1Flags(); /* clear TIMER1 ovf and ICP flag from TIFR*/
    1e80:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Clear_Timer1Flags>

	/* when ICP1 receives a rising edge TIFR_ICF1 in TIFR will get triggered*/
	while ((TIFR & (1 << TIFR_ICF1)) == 0);/* wait for rising edge */
    1e84:	e8 e5       	ldi	r30, 0x58	; 88
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	80 72       	andi	r24, 0x20	; 32
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	b9 f3       	breq	.-18     	; 0x1e84 <USS_u32GetDistance+0x1b8>

	TCNT1H = 0;	/* Clear Timer1 counter */
    1e96:	ed e4       	ldi	r30, 0x4D	; 77
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	10 82       	st	Z, r1
	TCNT1L = 0;
    1e9c:	ec e4       	ldi	r30, 0x4C	; 76
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	10 82       	st	Z, r1

	setICP_FallingEdge(); /* set capture on falling edge and start timer */
    1ea2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <setICP_FallingEdge>
	Clear_Timer1Flags(); /* clear TIMER1 ovf and ICP flag from TIFR*/
    1ea6:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Clear_Timer1Flags>
	TIMER1_OVER_FLOW = 0;
    1eaa:	10 92 8b 01 	sts	0x018B, r1
    1eae:	10 92 8a 01 	sts	0x018A, r1

	while ((TIFR & (1 << TIFR_ICF1)) == 0);/* Wait for falling edge */
    1eb2:	e8 e5       	ldi	r30, 0x58	; 88
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	80 72       	andi	r24, 0x20	; 32
    1ebe:	90 70       	andi	r25, 0x00	; 0
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	b9 f3       	breq	.-18     	; 0x1eb2 <USS_u32GetDistance+0x1e6>

	return calcuteDistance();
    1ec4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <calcuteDistance>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
}
    1ecc:	bc 01       	movw	r22, r24
    1ece:	cd 01       	movw	r24, r26
    1ed0:	68 96       	adiw	r28, 0x18	; 24
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
    1edc:	cf 91       	pop	r28
    1ede:	df 91       	pop	r29
    1ee0:	08 95       	ret

00001ee2 <__vector_9>:


void __vector_9(void) __attribute__((signal));

void __vector_9(void)
{
    1ee2:	1f 92       	push	r1
    1ee4:	0f 92       	push	r0
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	0f 92       	push	r0
    1eea:	11 24       	eor	r1, r1
    1eec:	8f 93       	push	r24
    1eee:	9f 93       	push	r25
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	TIMER1_OVER_FLOW++;
    1ef8:	80 91 8a 01 	lds	r24, 0x018A
    1efc:	90 91 8b 01 	lds	r25, 0x018B
    1f00:	01 96       	adiw	r24, 0x01	; 1
    1f02:	90 93 8b 01 	sts	0x018B, r25
    1f06:	80 93 8a 01 	sts	0x018A, r24
}
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	9f 91       	pop	r25
    1f10:	8f 91       	pop	r24
    1f12:	0f 90       	pop	r0
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	0f 90       	pop	r0
    1f18:	1f 90       	pop	r1
    1f1a:	18 95       	reti

00001f1c <SERVO_voidRotateToAngle>:
#include <util/delay.h>
#include "SERVO_config.h"
#include "SERVO_interface.h"


void SERVO_voidRotateToAngle(uint8 Copy_u8AngleValue){
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	6d 97       	sbiw	r28, 0x1d	; 29
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	8d 8f       	std	Y+29, r24	; 0x1d
	if (Copy_u8AngleValue <= 0)
    1f32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f34:	88 23       	and	r24, r24
    1f36:	11 f4       	brne	.+4      	; 0x1f3c <SERVO_voidRotateToAngle+0x20>
		Copy_u8AngleValue = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	8d 8f       	std	Y+29, r24	; 0x1d
	float32 Local_DelayValue = (1009.0f * (float32)Copy_u8AngleValue) / 50.0;
    1f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f3e:	88 2f       	mov	r24, r24
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e0       	ldi	r26, 0x00	; 0
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	bc 01       	movw	r22, r24
    1f54:	cd 01       	movw	r24, r26
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e4       	ldi	r19, 0x40	; 64
    1f5a:	4c e7       	ldi	r20, 0x7C	; 124
    1f5c:	54 e4       	ldi	r21, 0x44	; 68
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	48 e4       	ldi	r20, 0x48	; 72
    1f70:	52 e4       	ldi	r21, 0x42	; 66
    1f72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	89 8f       	std	Y+25, r24	; 0x19
    1f7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f80:	bc 8f       	std	Y+28, r27	; 0x1c
	DIO_u8SetPinValue(SERVO_u8_PORT, SERVO_u8_PIN, DIO_u8_PIN_HIGH);
    1f82:	83 e0       	ldi	r24, 0x03	; 3
    1f84:	61 e0       	ldi	r22, 0x01	; 1
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
    1f8c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f8e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f90:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1f92:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1f94:	8d 8b       	std	Y+21, r24	; 0x15
    1f96:	9e 8b       	std	Y+22, r25	; 0x16
    1f98:	af 8b       	std	Y+23, r26	; 0x17
    1f9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa4:	2b ea       	ldi	r18, 0xAB	; 171
    1fa6:	3a ea       	ldi	r19, 0xAA	; 170
    1fa8:	4a ea       	ldi	r20, 0xAA	; 170
    1faa:	50 e4       	ldi	r21, 0x40	; 64
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	89 8b       	std	Y+17, r24	; 0x11
    1fb6:	9a 8b       	std	Y+18, r25	; 0x12
    1fb8:	ab 8b       	std	Y+19, r26	; 0x13
    1fba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fbc:	69 89       	ldd	r22, Y+17	; 0x11
    1fbe:	7a 89       	ldd	r23, Y+18	; 0x12
    1fc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	1c f4       	brge	.+6      	; 0x1fda <SERVO_voidRotateToAngle+0xbe>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	88 8b       	std	Y+16, r24	; 0x10
    1fd8:	91 c0       	rjmp	.+290    	; 0x20fc <SERVO_voidRotateToAngle+0x1e0>
	else if (__tmp > 255)
    1fda:	69 89       	ldd	r22, Y+17	; 0x11
    1fdc:	7a 89       	ldd	r23, Y+18	; 0x12
    1fde:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	53 e4       	ldi	r21, 0x43	; 67
    1fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	0c f0       	brlt	.+2      	; 0x1ff4 <SERVO_voidRotateToAngle+0xd8>
    1ff2:	7b c0       	rjmp	.+246    	; 0x20ea <SERVO_voidRotateToAngle+0x1ce>
	{
		_delay_ms(__us / 1000.0);
    1ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    1ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a e7       	ldi	r20, 0x7A	; 122
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8c 87       	std	Y+12, r24	; 0x0c
    200e:	9d 87       	std	Y+13, r25	; 0x0d
    2010:	ae 87       	std	Y+14, r26	; 0x0e
    2012:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	6c 85       	ldd	r22, Y+12	; 0x0c
    2016:	7d 85       	ldd	r23, Y+13	; 0x0d
    2018:	8e 85       	ldd	r24, Y+14	; 0x0e
    201a:	9f 85       	ldd	r25, Y+15	; 0x0f
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a e7       	ldi	r20, 0x7A	; 122
    2022:	55 e4       	ldi	r21, 0x45	; 69
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	88 87       	std	Y+8, r24	; 0x08
    202e:	99 87       	std	Y+9, r25	; 0x09
    2030:	aa 87       	std	Y+10, r26	; 0x0a
    2032:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2034:	68 85       	ldd	r22, Y+8	; 0x08
    2036:	79 85       	ldd	r23, Y+9	; 0x09
    2038:	8a 85       	ldd	r24, Y+10	; 0x0a
    203a:	9b 85       	ldd	r25, Y+11	; 0x0b
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <SERVO_voidRotateToAngle+0x13a>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9f 83       	std	Y+7, r25	; 0x07
    2052:	8e 83       	std	Y+6, r24	; 0x06
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <SERVO_voidRotateToAngle+0x1b8>
	else if (__tmp > 65535)
    2056:	68 85       	ldd	r22, Y+8	; 0x08
    2058:	79 85       	ldd	r23, Y+9	; 0x09
    205a:	8a 85       	ldd	r24, Y+10	; 0x0a
    205c:	9b 85       	ldd	r25, Y+11	; 0x0b
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <SERVO_voidRotateToAngle+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2070:	7d 85       	ldd	r23, Y+13	; 0x0d
    2072:	8e 85       	ldd	r24, Y+14	; 0x0e
    2074:	9f 85       	ldd	r25, Y+15	; 0x0f
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9f 83       	std	Y+7, r25	; 0x07
    2094:	8e 83       	std	Y+6, r24	; 0x06
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <SERVO_voidRotateToAngle+0x19a>
    2098:	80 e9       	ldi	r24, 0x90	; 144
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9d 83       	std	Y+5, r25	; 0x05
    209e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <SERVO_voidRotateToAngle+0x188>
    20a8:	9d 83       	std	Y+5, r25	; 0x05
    20aa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	8e 81       	ldd	r24, Y+6	; 0x06
    20ae:	9f 81       	ldd	r25, Y+7	; 0x07
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9f 83       	std	Y+7, r25	; 0x07
    20b4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	8e 81       	ldd	r24, Y+6	; 0x06
    20b8:	9f 81       	ldd	r25, Y+7	; 0x07
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <SERVO_voidRotateToAngle+0x17c>
    20be:	24 c0       	rjmp	.+72     	; 0x2108 <SERVO_voidRotateToAngle+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	68 85       	ldd	r22, Y+8	; 0x08
    20c2:	79 85       	ldd	r23, Y+9	; 0x09
    20c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9f 83       	std	Y+7, r25	; 0x07
    20d2:	8e 83       	std	Y+6, r24	; 0x06
    20d4:	8e 81       	ldd	r24, Y+6	; 0x06
    20d6:	9f 81       	ldd	r25, Y+7	; 0x07
    20d8:	9b 83       	std	Y+3, r25	; 0x03
    20da:	8a 83       	std	Y+2, r24	; 0x02
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <SERVO_voidRotateToAngle+0x1c4>
    20e4:	9b 83       	std	Y+3, r25	; 0x03
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <SERVO_voidRotateToAngle+0x1ec>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ea:	69 89       	ldd	r22, Y+17	; 0x11
    20ec:	7a 89       	ldd	r23, Y+18	; 0x12
    20ee:	8b 89       	ldd	r24, Y+19	; 0x13
    20f0:	9c 89       	ldd	r25, Y+20	; 0x14
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	88 8b       	std	Y+16, r24	; 0x10
    20fc:	88 89       	ldd	r24, Y+16	; 0x10
    20fe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	8a 95       	dec	r24
    2104:	f1 f7       	brne	.-4      	; 0x2102 <SERVO_voidRotateToAngle+0x1e6>
    2106:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(Local_DelayValue);
	DIO_u8SetPinValue(SERVO_u8_PORT, SERVO_u8_PIN, DIO_u8_PIN_LOW);
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
}
    2112:	6d 96       	adiw	r28, 0x1d	; 29
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <MOTOR_u8MoveMotor>:
#include "../../MCAL/PWM/PWM_interface.h"
#include "MOTOR_interface.h"



uint8 MOTOR_u8MoveMotor(struct Motor Copy_Motor , uint8 Copy_u8Dirction){
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <MOTOR_u8MoveMotor+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <MOTOR_u8MoveMotor+0x8>
    212c:	00 d0       	rcall	.+0      	; 0x212e <MOTOR_u8MoveMotor+0xa>
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	9b 83       	std	Y+3, r25	; 0x03
    2134:	8a 83       	std	Y+2, r24	; 0x02
    2136:	6c 83       	std	Y+4, r22	; 0x04
	uint8 Local_u8ErrorState = OK;
    2138:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Dirction){
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3e 83       	std	Y+6, r19	; 0x06
    2142:	2d 83       	std	Y+5, r18	; 0x05
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	31 f0       	breq	.+12     	; 0x2158 <MOTOR_u8MoveMotor+0x34>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	21 30       	cpi	r18, 0x01	; 1
    2152:	31 05       	cpc	r19, r1
    2154:	c9 f0       	breq	.+50     	; 0x2188 <MOTOR_u8MoveMotor+0x64>
    2156:	30 c0       	rjmp	.+96     	; 0x21b8 <MOTOR_u8MoveMotor+0x94>
	case MOTOR_u8_CLOCKWISE:
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_LOW);
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	8f 70       	andi	r24, 0x0F	; 15
    215c:	28 2f       	mov	r18, r24
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	82 95       	swap	r24
    2162:	8f 70       	andi	r24, 0x0F	; 15
    2164:	98 2f       	mov	r25, r24
    2166:	82 2f       	mov	r24, r18
    2168:	69 2f       	mov	r22, r25
    216a:	40 e0       	ldi	r20, 0x00	; 0
    216c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_HIGH);
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	8f 70       	andi	r24, 0x0F	; 15
    2174:	28 2f       	mov	r18, r24
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	8f 70       	andi	r24, 0x0F	; 15
    217a:	98 2f       	mov	r25, r24
    217c:	82 2f       	mov	r24, r18
    217e:	69 2f       	mov	r22, r25
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
    2186:	1a c0       	rjmp	.+52     	; 0x21bc <MOTOR_u8MoveMotor+0x98>
		break;
	case MOTOR_u8_ANTICLOCKWISE:
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_LOW);
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	8f 70       	andi	r24, 0x0F	; 15
    218c:	28 2f       	mov	r18, r24
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	8f 70       	andi	r24, 0x0F	; 15
    2192:	98 2f       	mov	r25, r24
    2194:	82 2f       	mov	r24, r18
    2196:	69 2f       	mov	r22, r25
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_HIGH);
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	8f 70       	andi	r24, 0x0F	; 15
    21a2:	28 2f       	mov	r18, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	82 95       	swap	r24
    21a8:	8f 70       	andi	r24, 0x0F	; 15
    21aa:	98 2f       	mov	r25, r24
    21ac:	82 2f       	mov	r24, r18
    21ae:	69 2f       	mov	r22, r25
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <MOTOR_u8MoveMotor+0x98>
		break;
	default:
		Local_u8ErrorState = NOK;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_u8ErrorState;
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    21be:	26 96       	adiw	r28, 0x06	; 6
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <MOTOR_voidStopMotor>:

/* this function stops pin1 and pin2 of the motor does not affect PWM*/
void MOTOR_voidStopMotor(struct Motor Copy_Motor){
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <MOTOR_voidStopMotor+0x6>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin1, DIO_u8_PIN_LOW);
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	8f 70       	andi	r24, 0x0F	; 15
    21e2:	28 2f       	mov	r18, r24
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	82 95       	swap	r24
    21e8:	8f 70       	andi	r24, 0x0F	; 15
    21ea:	98 2f       	mov	r25, r24
    21ec:	82 2f       	mov	r24, r18
    21ee:	69 2f       	mov	r22, r25
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Copy_Motor.motor_u8_port, Copy_Motor.motor_u8_pin2, DIO_u8_PIN_LOW);
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	8f 70       	andi	r24, 0x0F	; 15
    21fa:	28 2f       	mov	r18, r24
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	8f 70       	andi	r24, 0x0F	; 15
    2200:	98 2f       	mov	r25, r24
    2202:	82 2f       	mov	r24, r18
    2204:	69 2f       	mov	r22, r25
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
}
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <MOTOR_voidSetMotorsPWMDutyCycle>:


/* PWM pin at OC0 (PWM0) */
void MOTOR_voidSetMotorsPWMDutyCycle(uint8 Copy_u8DutyCycle){
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	0f 92       	push	r0
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	89 83       	std	Y+1, r24	; 0x01
	PWM0_VoidSetDutyCycle(Copy_u8DutyCycle);
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	0e 94 8b 08 	call	0x1116	; 0x1116 <PWM0_VoidSetDutyCycle>
	return;
}
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <SetDataPins>:
#include "CLCD_config.h"


#if CLCD_u8_MODE == FOUR_BIT
static void SetDataPins(uint8 Copy_u8Data)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	0f 92       	push	r0
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN4,GET_BIT(Copy_u8Data,0));
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	98 2f       	mov	r25, r24
    2240:	91 70       	andi	r25, 0x01	; 1
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	64 e0       	ldi	r22, 0x04	; 4
    2246:	49 2f       	mov	r20, r25
    2248:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN5,GET_BIT(Copy_u8Data,1));
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	86 95       	lsr	r24
    2250:	98 2f       	mov	r25, r24
    2252:	91 70       	andi	r25, 0x01	; 1
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	65 e0       	ldi	r22, 0x05	; 5
    2258:	49 2f       	mov	r20, r25
    225a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN6,GET_BIT(Copy_u8Data,2));
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	86 95       	lsr	r24
    2262:	86 95       	lsr	r24
    2264:	98 2f       	mov	r25, r24
    2266:	91 70       	andi	r25, 0x01	; 1
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	66 e0       	ldi	r22, 0x06	; 6
    226c:	49 2f       	mov	r20, r25
    226e:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_u8_DATA_PORT,CLCD_u8_PIN7,GET_BIT(Copy_u8Data,3));
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	86 95       	lsr	r24
    2276:	86 95       	lsr	r24
    2278:	86 95       	lsr	r24
    227a:	98 2f       	mov	r25, r24
    227c:	91 70       	andi	r25, 0x01	; 1
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	67 e0       	ldi	r22, 0x07	; 7
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
}
    2288:	0f 90       	pop	r0
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <SendEnablePulse>:
#endif

static void SendEnablePulse(void){
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	cd b7       	in	r28, 0x3d	; 61
    2296:	de b7       	in	r29, 0x3e	; 62
    2298:	2e 97       	sbiw	r28, 0x0e	; 14
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
	/*send enable pulse*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,DIO_u8_PIN_HIGH);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	63 e0       	ldi	r22, 0x03	; 3
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e0       	ldi	r26, 0x00	; 0
    22b4:	b0 e4       	ldi	r27, 0x40	; 64
    22b6:	8b 87       	std	Y+11, r24	; 0x0b
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	ad 87       	std	Y+13, r26	; 0x0d
    22bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	55 e4       	ldi	r21, 0x45	; 69
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	98 87       	std	Y+8, r25	; 0x08
    22da:	a9 87       	std	Y+9, r26	; 0x09
    22dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <SendEnablePulse+0x70>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <SendEnablePulse+0xee>
	else if (__tmp > 65535)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <SendEnablePulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <SendEnablePulse+0xd0>
    2342:	80 e9       	ldi	r24, 0x90	; 144
    2344:	91 e0       	ldi	r25, 0x01	; 1
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <SendEnablePulse+0xbe>
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <SendEnablePulse+0xb2>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <SendEnablePulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <SendEnablePulse+0xfa>
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_E_PIN,DIO_u8_PIN_LOW);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	63 e0       	ldi	r22, 0x03	; 3
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
}
    239c:	2e 96       	adiw	r28, 0x0e	; 14
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(uint8 Copy_u8Command)
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	0f 92       	push	r0
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	89 83       	std	Y+1, r24	; 0x01
	/*Set Rs pin to low for command*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,DIO_u8_PIN_LOW);
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	61 e0       	ldi	r22, 0x01	; 1
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>

	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,DIO_u8_PIN_LOW);
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	62 e0       	ldi	r22, 0x02	; 2
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
	/*send the command*/
	DIO_u8SetPortValue(CLCD_u8_DATA_PORT,Copy_u8Command);

	SendEnablePulse();
#elif CLCD_u8_MODE == FOUR_BIT
	SetDataPins(Copy_u8Command >> 4);
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	82 95       	swap	r24
    23d2:	8f 70       	andi	r24, 0x0F	; 15
    23d4:	0e 94 18 11 	call	0x2230	; 0x2230 <SetDataPins>
	SendEnablePulse();
    23d8:	0e 94 48 11 	call	0x2290	; 0x2290 <SendEnablePulse>
	SetDataPins(Copy_u8Command);
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	0e 94 18 11 	call	0x2230	; 0x2230 <SetDataPins>
	SendEnablePulse();
    23e2:	0e 94 48 11 	call	0x2290	; 0x2290 <SendEnablePulse>
#endif
}
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <CLCD_voidSendData>:

void CLCD_voidSendData(uint8 Copy_u8Data){
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	0f 92       	push	r0
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	89 83       	std	Y+1, r24	; 0x01
	/*Set Rs pin to high for Data*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RS_PIN,DIO_u8_PIN_HIGH);
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	61 e0       	ldi	r22, 0x01	; 1
    23fe:	41 e0       	ldi	r20, 0x01	; 1
    2400:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>

	/*set RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_u8_CTRL_PORT,CLCD_u8_RW_PIN,DIO_u8_PIN_LOW);
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	62 e0       	ldi	r22, 0x02	; 2
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <DIO_u8SetPinValue>
#if CLCD_u8_MODE == EIGHT_BIT
	/*send the command*/
	DIO_u8SetPortValue(CLCD_u8_DATA_PORT,Copy_u8Data);
	SendEnablePulse();
#elif CLCD_u8_MODE == FOUR_BIT
	SetDataPins(Copy_u8Data >> 4);
    240e:	89 81       	ldd	r24, Y+1	; 0x01
    2410:	82 95       	swap	r24
    2412:	8f 70       	andi	r24, 0x0F	; 15
    2414:	0e 94 18 11 	call	0x2230	; 0x2230 <SetDataPins>
	SendEnablePulse();
    2418:	0e 94 48 11 	call	0x2290	; 0x2290 <SendEnablePulse>
	SetDataPins(Copy_u8Data);
    241c:	89 81       	ldd	r24, Y+1	; 0x01
    241e:	0e 94 18 11 	call	0x2230	; 0x2230 <SetDataPins>
	SendEnablePulse();
    2422:	0e 94 48 11 	call	0x2290	; 0x2290 <SendEnablePulse>
#endif

}
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <CLCD_voidInit>:

void CLCD_voidInit(void){
    242e:	df 93       	push	r29
    2430:	cf 93       	push	r28
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	2e 97       	sbiw	r28, 0x0e	; 14
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	a0 e2       	ldi	r26, 0x20	; 32
    2448:	b2 e4       	ldi	r27, 0x42	; 66
    244a:	8b 87       	std	Y+11, r24	; 0x0b
    244c:	9c 87       	std	Y+12, r25	; 0x0c
    244e:	ad 87       	std	Y+13, r26	; 0x0d
    2450:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2452:	6b 85       	ldd	r22, Y+11	; 0x0b
    2454:	7c 85       	ldd	r23, Y+12	; 0x0c
    2456:	8d 85       	ldd	r24, Y+13	; 0x0d
    2458:	9e 85       	ldd	r25, Y+14	; 0x0e
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	4a e7       	ldi	r20, 0x7A	; 122
    2460:	55 e4       	ldi	r21, 0x45	; 69
    2462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	8f 83       	std	Y+7, r24	; 0x07
    246c:	98 87       	std	Y+8, r25	; 0x08
    246e:	a9 87       	std	Y+9, r26	; 0x09
    2470:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2472:	6f 81       	ldd	r22, Y+7	; 0x07
    2474:	78 85       	ldd	r23, Y+8	; 0x08
    2476:	89 85       	ldd	r24, Y+9	; 0x09
    2478:	9a 85       	ldd	r25, Y+10	; 0x0a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	40 e8       	ldi	r20, 0x80	; 128
    2480:	5f e3       	ldi	r21, 0x3F	; 63
    2482:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2486:	88 23       	and	r24, r24
    2488:	2c f4       	brge	.+10     	; 0x2494 <CLCD_voidInit+0x66>
		__ticks = 1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	8d 83       	std	Y+5, r24	; 0x05
    2492:	3f c0       	rjmp	.+126    	; 0x2512 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2494:	6f 81       	ldd	r22, Y+7	; 0x07
    2496:	78 85       	ldd	r23, Y+8	; 0x08
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	3f ef       	ldi	r19, 0xFF	; 255
    24a0:	4f e7       	ldi	r20, 0x7F	; 127
    24a2:	57 e4       	ldi	r21, 0x47	; 71
    24a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24a8:	18 16       	cp	r1, r24
    24aa:	4c f5       	brge	.+82     	; 0x24fe <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e2       	ldi	r20, 0x20	; 32
    24ba:	51 e4       	ldi	r21, 0x41	; 65
    24bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	bc 01       	movw	r22, r24
    24c6:	cd 01       	movw	r24, r26
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	9e 83       	std	Y+6, r25	; 0x06
    24d2:	8d 83       	std	Y+5, r24	; 0x05
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <CLCD_voidInit+0xc6>
    24d6:	80 e9       	ldi	r24, 0x90	; 144
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	9c 83       	std	Y+4, r25	; 0x04
    24dc:	8b 83       	std	Y+3, r24	; 0x03
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <CLCD_voidInit+0xb4>
    24e6:	9c 83       	std	Y+4, r25	; 0x04
    24e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ea:	8d 81       	ldd	r24, Y+5	; 0x05
    24ec:	9e 81       	ldd	r25, Y+6	; 0x06
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f4:	8d 81       	ldd	r24, Y+5	; 0x05
    24f6:	9e 81       	ldd	r25, Y+6	; 0x06
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	69 f7       	brne	.-38     	; 0x24d6 <CLCD_voidInit+0xa8>
    24fc:	14 c0       	rjmp	.+40     	; 0x2526 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2500:	78 85       	ldd	r23, Y+8	; 0x08
    2502:	89 85       	ldd	r24, Y+9	; 0x09
    2504:	9a 85       	ldd	r25, Y+10	; 0x0a
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9e 83       	std	Y+6, r25	; 0x06
    2510:	8d 83       	std	Y+5, r24	; 0x05
    2512:	8d 81       	ldd	r24, Y+5	; 0x05
    2514:	9e 81       	ldd	r25, Y+6	; 0x06
    2516:	9a 83       	std	Y+2, r25	; 0x02
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	9a 81       	ldd	r25, Y+2	; 0x02
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <CLCD_voidInit+0xf0>
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
#if CLCD_u8_MODE == EIGHT_BIT
	/*Function set command : 2 lines , font size : 5*7*/
	CLCD_voidSendCommand(0b00111000);
#elif CLCD_u8_MODE == FOUR_BIT
	SetDataPins(0b0010);
    2526:	82 e0       	ldi	r24, 0x02	; 2
    2528:	0e 94 18 11 	call	0x2230	; 0x2230 <SetDataPins>
	SendEnablePulse();
    252c:	0e 94 48 11 	call	0x2290	; 0x2290 <SendEnablePulse>
	SetDataPins(0b0010);
    2530:	82 e0       	ldi	r24, 0x02	; 2
    2532:	0e 94 18 11 	call	0x2230	; 0x2230 <SetDataPins>
	SendEnablePulse();
    2536:	0e 94 48 11 	call	0x2290	; 0x2290 <SendEnablePulse>
	SetDataPins(0b1000);
    253a:	88 e0       	ldi	r24, 0x08	; 8
    253c:	0e 94 18 11 	call	0x2230	; 0x2230 <SetDataPins>
	SendEnablePulse();
    2540:	0e 94 48 11 	call	0x2290	; 0x2290 <SendEnablePulse>
#endif
	/*Function set command :  display on , cursor off , blink cursor off*/
	CLCD_voidSendCommand(0b00001100);
    2544:	8c e0       	ldi	r24, 0x0C	; 12
    2546:	0e 94 d7 11 	call	0x23ae	; 0x23ae <CLCD_voidSendCommand>
	/*Clear LCD*/
	CLCD_voidSendCommand(1);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <CLCD_voidSendCommand>
}
    2550:	2e 96       	adiw	r28, 0x0e	; 14
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	de bf       	out	0x3e, r29	; 62
    2558:	0f be       	out	0x3f, r0	; 63
    255a:	cd bf       	out	0x3d, r28	; 61
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <CLCD_sendString>:

uint8 CLCD_sendString(char Copy_u8StringArray[]){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <CLCD_sendString+0x6>
    2568:	00 d0       	rcall	.+0      	; 0x256a <CLCD_sendString+0x8>
    256a:	0f 92       	push	r0
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	9d 83       	std	Y+5, r25	; 0x05
    2572:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Local_u8ErrorState = OK;
    2574:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u8StringArray == NULL){
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	9d 81       	ldd	r25, Y+5	; 0x05
    257a:	00 97       	sbiw	r24, 0x00	; 0
    257c:	19 f4       	brne	.+6      	; 0x2584 <CLCD_sendString+0x22>
		Local_u8ErrorState = NULL_POINTER;
    257e:	82 e0       	ldi	r24, 0x02	; 2
    2580:	8b 83       	std	Y+3, r24	; 0x03
    2582:	1c c0       	rjmp	.+56     	; 0x25bc <CLCD_sendString+0x5a>
	}
	else{
		for(int i = 0 ; Copy_u8StringArray[i] != '\0' ; i++){
    2584:	1a 82       	std	Y+2, r1	; 0x02
    2586:	19 82       	std	Y+1, r1	; 0x01
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <CLCD_sendString+0x46>
			CLCD_voidSendData(Copy_u8StringArray[i]);
    258a:	29 81       	ldd	r18, Y+1	; 0x01
    258c:	3a 81       	ldd	r19, Y+2	; 0x02
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	9d 81       	ldd	r25, Y+5	; 0x05
    2592:	fc 01       	movw	r30, r24
    2594:	e2 0f       	add	r30, r18
    2596:	f3 1f       	adc	r31, r19
    2598:	80 81       	ld	r24, Z
    259a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendData>
	uint8 Local_u8ErrorState = OK;
	if(Copy_u8StringArray == NULL){
		Local_u8ErrorState = NULL_POINTER;
	}
	else{
		for(int i = 0 ; Copy_u8StringArray[i] != '\0' ; i++){
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	01 96       	adiw	r24, 0x01	; 1
    25a4:	9a 83       	std	Y+2, r25	; 0x02
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	29 81       	ldd	r18, Y+1	; 0x01
    25aa:	3a 81       	ldd	r19, Y+2	; 0x02
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	9d 81       	ldd	r25, Y+5	; 0x05
    25b0:	fc 01       	movw	r30, r24
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	80 81       	ld	r24, Z
    25b8:	88 23       	and	r24, r24
    25ba:	39 f7       	brne	.-50     	; 0x258a <CLCD_sendString+0x28>
			CLCD_voidSendData(Copy_u8StringArray[i]);
		}
	}

	return Local_u8ErrorState;
    25bc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	0f 90       	pop	r0
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <CLCD_sendNumebr>:

uint8 CLCD_sendNumebr(uint32 Copy_u8Number){
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	2a 97       	sbiw	r28, 0x0a	; 10
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	de bf       	out	0x3e, r29	; 62
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	cd bf       	out	0x3d, r28	; 61
    25e2:	6f 83       	std	Y+7, r22	; 0x07
    25e4:	78 87       	std	Y+8, r23	; 0x08
    25e6:	89 87       	std	Y+9, r24	; 0x09
    25e8:	9a 87       	std	Y+10, r25	; 0x0a

	uint8 Local_u8ErrorState = OK;
    25ea:	1e 82       	std	Y+6, r1	; 0x06
	if(Copy_u8Number == 0)
    25ec:	8f 81       	ldd	r24, Y+7	; 0x07
    25ee:	98 85       	ldd	r25, Y+8	; 0x08
    25f0:	a9 85       	ldd	r26, Y+9	; 0x09
    25f2:	ba 85       	ldd	r27, Y+10	; 0x0a
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	a1 05       	cpc	r26, r1
    25f8:	b1 05       	cpc	r27, r1
    25fa:	21 f4       	brne	.+8      	; 0x2604 <CLCD_sendNumebr+0x36>
	{
		CLCD_voidSendData('0');
    25fc:	80 e3       	ldi	r24, 0x30	; 48
    25fe:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendData>
    2602:	7c c0       	rjmp	.+248    	; 0x26fc <CLCD_sendNumebr+0x12e>
	}
	else
	{
		uint32 Local_u8Inverter = 0;
    2604:	1a 82       	std	Y+2, r1	; 0x02
    2606:	1b 82       	std	Y+3, r1	; 0x03
    2608:	1c 82       	std	Y+4, r1	; 0x04
    260a:	1d 82       	std	Y+5, r1	; 0x05

		//this is iterator to solve problem of 12500 (zero)
		uint8 Local_u8Iterator = 0;
    260c:	19 82       	std	Y+1, r1	; 0x01
    260e:	43 c0       	rjmp	.+134    	; 0x2696 <CLCD_sendNumebr+0xc8>

		while(Copy_u8Number != 0)
		{
			Local_u8Inverter *= 10;
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	9b 81       	ldd	r25, Y+3	; 0x03
    2614:	ac 81       	ldd	r26, Y+4	; 0x04
    2616:	bd 81       	ldd	r27, Y+5	; 0x05
    2618:	2a e0       	ldi	r18, 0x0A	; 10
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	bc 01       	movw	r22, r24
    2622:	cd 01       	movw	r24, r26
    2624:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsi3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	8a 83       	std	Y+2, r24	; 0x02
    262e:	9b 83       	std	Y+3, r25	; 0x03
    2630:	ac 83       	std	Y+4, r26	; 0x04
    2632:	bd 83       	std	Y+5, r27	; 0x05
			Local_u8Inverter += (Copy_u8Number % 10);
    2634:	8f 81       	ldd	r24, Y+7	; 0x07
    2636:	98 85       	ldd	r25, Y+8	; 0x08
    2638:	a9 85       	ldd	r26, Y+9	; 0x09
    263a:	ba 85       	ldd	r27, Y+10	; 0x0a
    263c:	2a e0       	ldi	r18, 0x0A	; 10
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__udivmodsi4>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9c 01       	movw	r18, r24
    2652:	ad 01       	movw	r20, r26
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	ac 81       	ldd	r26, Y+4	; 0x04
    265a:	bd 81       	ldd	r27, Y+5	; 0x05
    265c:	82 0f       	add	r24, r18
    265e:	93 1f       	adc	r25, r19
    2660:	a4 1f       	adc	r26, r20
    2662:	b5 1f       	adc	r27, r21
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	9b 83       	std	Y+3, r25	; 0x03
    2668:	ac 83       	std	Y+4, r26	; 0x04
    266a:	bd 83       	std	Y+5, r27	; 0x05
			Copy_u8Number /= 10;
    266c:	8f 81       	ldd	r24, Y+7	; 0x07
    266e:	98 85       	ldd	r25, Y+8	; 0x08
    2670:	a9 85       	ldd	r26, Y+9	; 0x09
    2672:	ba 85       	ldd	r27, Y+10	; 0x0a
    2674:	2a e0       	ldi	r18, 0x0A	; 10
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	50 e0       	ldi	r21, 0x00	; 0
    267c:	bc 01       	movw	r22, r24
    267e:	cd 01       	movw	r24, r26
    2680:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__udivmodsi4>
    2684:	da 01       	movw	r26, r20
    2686:	c9 01       	movw	r24, r18
    2688:	8f 83       	std	Y+7, r24	; 0x07
    268a:	98 87       	std	Y+8, r25	; 0x08
    268c:	a9 87       	std	Y+9, r26	; 0x09
    268e:	ba 87       	std	Y+10, r27	; 0x0a
			Local_u8Iterator++;
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	8f 5f       	subi	r24, 0xFF	; 255
    2694:	89 83       	std	Y+1, r24	; 0x01
		uint32 Local_u8Inverter = 0;

		//this is iterator to solve problem of 12500 (zero)
		uint8 Local_u8Iterator = 0;

		while(Copy_u8Number != 0)
    2696:	8f 81       	ldd	r24, Y+7	; 0x07
    2698:	98 85       	ldd	r25, Y+8	; 0x08
    269a:	a9 85       	ldd	r26, Y+9	; 0x09
    269c:	ba 85       	ldd	r27, Y+10	; 0x0a
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	a1 05       	cpc	r26, r1
    26a2:	b1 05       	cpc	r27, r1
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <CLCD_sendNumebr+0xda>
    26a6:	b4 cf       	rjmp	.-152    	; 0x2610 <CLCD_sendNumebr+0x42>
    26a8:	26 c0       	rjmp	.+76     	; 0x26f6 <CLCD_sendNumebr+0x128>
			Copy_u8Number /= 10;
			Local_u8Iterator++;
		}
		for(;Local_u8Iterator > 0 ; Local_u8Iterator--)
		{
			CLCD_voidSendData((Local_u8Inverter % 10) + '0');
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	ac 81       	ldd	r26, Y+4	; 0x04
    26b0:	bd 81       	ldd	r27, Y+5	; 0x05
    26b2:	2a e0       	ldi	r18, 0x0A	; 10
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__udivmodsi4>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	80 5d       	subi	r24, 0xD0	; 208
    26c8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendData>
			Local_u8Inverter /= 10;
    26cc:	8a 81       	ldd	r24, Y+2	; 0x02
    26ce:	9b 81       	ldd	r25, Y+3	; 0x03
    26d0:	ac 81       	ldd	r26, Y+4	; 0x04
    26d2:	bd 81       	ldd	r27, Y+5	; 0x05
    26d4:	2a e0       	ldi	r18, 0x0A	; 10
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	50 e0       	ldi	r21, 0x00	; 0
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <__udivmodsi4>
    26e4:	da 01       	movw	r26, r20
    26e6:	c9 01       	movw	r24, r18
    26e8:	8a 83       	std	Y+2, r24	; 0x02
    26ea:	9b 83       	std	Y+3, r25	; 0x03
    26ec:	ac 83       	std	Y+4, r26	; 0x04
    26ee:	bd 83       	std	Y+5, r27	; 0x05
			Local_u8Inverter *= 10;
			Local_u8Inverter += (Copy_u8Number % 10);
			Copy_u8Number /= 10;
			Local_u8Iterator++;
		}
		for(;Local_u8Iterator > 0 ; Local_u8Iterator--)
    26f0:	89 81       	ldd	r24, Y+1	; 0x01
    26f2:	81 50       	subi	r24, 0x01	; 1
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	88 23       	and	r24, r24
    26fa:	b9 f6       	brne	.-82     	; 0x26aa <CLCD_sendNumebr+0xdc>
			CLCD_voidSendData((Local_u8Inverter % 10) + '0');
			Local_u8Inverter /= 10;
		}
	}

	return Local_u8ErrorState;
    26fc:	8e 81       	ldd	r24, Y+6	; 0x06
}
    26fe:	2a 96       	adiw	r28, 0x0a	; 10
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(uint8 Copy_u8XPos , uint8 Copy_YPos){
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <CLCD_voidGoToXY+0x6>
    2716:	0f 92       	push	r0
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	8a 83       	std	Y+2, r24	; 0x02
    271e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Local_u8Add=0;
    2720:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_YPos == 0)
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	88 23       	and	r24, r24
    2726:	19 f4       	brne	.+6      	; 0x272e <CLCD_voidGoToXY+0x1e>
		Local_u8Add = Copy_u8XPos;
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	06 c0       	rjmp	.+12     	; 0x273a <CLCD_voidGoToXY+0x2a>
	else if(Copy_YPos == 1)
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	19 f4       	brne	.+6      	; 0x273a <CLCD_voidGoToXY+0x2a>
		Local_u8Add = Copy_u8XPos + 0x40;
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	80 5c       	subi	r24, 0xC0	; 192
    2738:	89 83       	std	Y+1, r24	; 0x01

	/*Set bit number 7 for Set DDRAM Address*/
	SET_BIT(Local_u8Add,7);
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	80 68       	ori	r24, 0x80	; 128
    273e:	89 83       	std	Y+1, r24	; 0x01

	/*set DDRAM address for command*/
	CLCD_voidSendCommand(Local_u8Add);
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	0e 94 d7 11 	call	0x23ae	; 0x23ae <CLCD_voidSendCommand>
}
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <CLCD_voidSendSpecialChatacter>:

uint8 CLCD_voidSendSpecialChatacter(uint8* Copy_u8Pattern,uint8 Copy_u8PatternNum,uint8 Copy_u8XPos, uint8 Copy_u8YPos){
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	28 97       	sbiw	r28, 0x08	; 8
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	9d 83       	std	Y+5, r25	; 0x05
    2768:	8c 83       	std	Y+4, r24	; 0x04
    276a:	6e 83       	std	Y+6, r22	; 0x06
    276c:	4f 83       	std	Y+7, r20	; 0x07
    276e:	28 87       	std	Y+8, r18	; 0x08
	uint8 Local_u8ErrorState = OK;
    2770:	1b 82       	std	Y+3, r1	; 0x03
	if(Copy_u8Pattern != NULL)
    2772:	8c 81       	ldd	r24, Y+4	; 0x04
    2774:	9d 81       	ldd	r25, Y+5	; 0x05
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	59 f1       	breq	.+86     	; 0x27d0 <CLCD_voidSendSpecialChatacter+0x7e>
	{
		uint8 Local_u8Counter;
		uint8 Local_u8Add = Copy_u8PatternNum * 8;
    277a:	8e 81       	ldd	r24, Y+6	; 0x06
    277c:	88 2f       	mov	r24, r24
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	88 0f       	add	r24, r24
    2786:	99 1f       	adc	r25, r25
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(Local_u8Add,6); //set bit number 6 for set CGRAM address Command
    278e:	89 81       	ldd	r24, Y+1	; 0x01
    2790:	80 64       	ori	r24, 0x40	; 64
    2792:	89 83       	std	Y+1, r24	; 0x01

		CLCD_voidSendCommand(Local_u8Add); // Set CGRAM address command
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	0e 94 d7 11 	call	0x23ae	; 0x23ae <CLCD_voidSendCommand>
		/*Draw the pattern inside CGRAM*/
		for(Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++){
    279a:	1a 82       	std	Y+2, r1	; 0x02
    279c:	0e c0       	rjmp	.+28     	; 0x27ba <CLCD_voidSendSpecialChatacter+0x68>
			CLCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	8c 81       	ldd	r24, Y+4	; 0x04
    27a6:	9d 81       	ldd	r25, Y+5	; 0x05
    27a8:	fc 01       	movw	r30, r24
    27aa:	e2 0f       	add	r30, r18
    27ac:	f3 1f       	adc	r31, r19
    27ae:	80 81       	ld	r24, Z
    27b0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendData>
		uint8 Local_u8Add = Copy_u8PatternNum * 8;
		SET_BIT(Local_u8Add,6); //set bit number 6 for set CGRAM address Command

		CLCD_voidSendCommand(Local_u8Add); // Set CGRAM address command
		/*Draw the pattern inside CGRAM*/
		for(Local_u8Counter = 0; Local_u8Counter < 8 ; Local_u8Counter++){
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	8f 5f       	subi	r24, 0xFF	; 255
    27b8:	8a 83       	std	Y+2, r24	; 0x02
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	88 30       	cpi	r24, 0x08	; 8
    27be:	78 f3       	brcs	.-34     	; 0x279e <CLCD_voidSendSpecialChatacter+0x4c>
			CLCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
		}

		/*Go back to DDRAM*/
		CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    27c0:	8f 81       	ldd	r24, Y+7	; 0x07
    27c2:	68 85       	ldd	r22, Y+8	; 0x08
    27c4:	0e 94 88 13 	call	0x2710	; 0x2710 <CLCD_voidGoToXY>

		/*Display the drawn pattern*/
		CLCD_voidSendData(Copy_u8PatternNum);
    27c8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ca:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendData>
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <CLCD_voidSendSpecialChatacter+0x82>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	8b 83       	std	Y+3, r24	; 0x03
	}

	return Local_u8ErrorState;
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    27d6:	28 96       	adiw	r28, 0x08	; 8
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay()
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(0b00000001);
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    27f2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <CLCD_voidSendCommand>
}
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <MoveServo180Degrees>:
uint8 MoveServo180Degrees();
void voidInitMotors();
void voidCheckObstacle_MoveAccordingly(uint32 Copy_32USSDistance, uint8 Copy_u8Dirction);


uint8 MoveServo180Degrees(){
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	62 97       	sbiw	r28, 0x12	; 18
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
	 * based on the last angle stored in Local_u8CurrentAngle static variable  */
	static uint8 Local_u8CurrentAngle = 0;
	/* inc_flag is used ro rotate the servo on the
	 * specified angles Clock wise or anti clock wise */
	static uint8 Local_u8IncFlag = 1;
	uint8 Local_u8Direction = ' ';
    2810:	80 e2       	ldi	r24, 0x20	; 32
    2812:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_u8IncFlag)
    2814:	80 91 7e 01 	lds	r24, 0x017E
    2818:	88 23       	and	r24, r24
    281a:	31 f0       	breq	.+12     	; 0x2828 <MoveServo180Degrees+0x2c>
		Local_u8CurrentAngle += 50;
    281c:	80 91 8c 01 	lds	r24, 0x018C
    2820:	8e 5c       	subi	r24, 0xCE	; 206
    2822:	80 93 8c 01 	sts	0x018C, r24
    2826:	05 c0       	rjmp	.+10     	; 0x2832 <MoveServo180Degrees+0x36>
	else
		Local_u8CurrentAngle -= 50;
    2828:	80 91 8c 01 	lds	r24, 0x018C
    282c:	82 53       	subi	r24, 0x32	; 50
    282e:	80 93 8c 01 	sts	0x018C, r24

	switch(Local_u8CurrentAngle){
    2832:	80 91 8c 01 	lds	r24, 0x018C
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	3a 8b       	std	Y+18, r19	; 0x12
    283c:	29 8b       	std	Y+17, r18	; 0x11
    283e:	89 89       	ldd	r24, Y+17	; 0x11
    2840:	9a 89       	ldd	r25, Y+18	; 0x12
    2842:	82 33       	cpi	r24, 0x32	; 50
    2844:	91 05       	cpc	r25, r1
    2846:	61 f0       	breq	.+24     	; 0x2860 <MoveServo180Degrees+0x64>
    2848:	29 89       	ldd	r18, Y+17	; 0x11
    284a:	3a 89       	ldd	r19, Y+18	; 0x12
    284c:	24 36       	cpi	r18, 0x64	; 100
    284e:	31 05       	cpc	r19, r1
    2850:	51 f0       	breq	.+20     	; 0x2866 <MoveServo180Degrees+0x6a>
    2852:	89 89       	ldd	r24, Y+17	; 0x11
    2854:	9a 89       	ldd	r25, Y+18	; 0x12
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	49 f4       	brne	.+18     	; 0x286c <MoveServo180Degrees+0x70>
	case 0:
		Local_u8Direction = 'L';
    285a:	8c e4       	ldi	r24, 0x4C	; 76
    285c:	8f 87       	std	Y+15, r24	; 0x0f
    285e:	08 c0       	rjmp	.+16     	; 0x2870 <MoveServo180Degrees+0x74>
		break;
	case 50:
		Local_u8Direction = 'C';
    2860:	83 e4       	ldi	r24, 0x43	; 67
    2862:	8f 87       	std	Y+15, r24	; 0x0f
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <MoveServo180Degrees+0x74>
		break;
	case 100:
		Local_u8Direction = 'R';
    2866:	82 e5       	ldi	r24, 0x52	; 82
    2868:	8f 87       	std	Y+15, r24	; 0x0f
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <MoveServo180Degrees+0x74>
		break;
	default:
		Local_u8Direction = ' ';
    286c:	80 e2       	ldi	r24, 0x20	; 32
    286e:	8f 87       	std	Y+15, r24	; 0x0f
		break;
	}
	/* rotate servo according to changes */
	SERVO_voidRotateToAngle(Local_u8CurrentAngle);
    2870:	80 91 8c 01 	lds	r24, 0x018C
    2874:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <SERVO_voidRotateToAngle>
	if(Local_u8CurrentAngle <= 1 || Local_u8CurrentAngle >= 100)
    2878:	80 91 8c 01 	lds	r24, 0x018C
    287c:	82 30       	cpi	r24, 0x02	; 2
    287e:	20 f0       	brcs	.+8      	; 0x2888 <MoveServo180Degrees+0x8c>
    2880:	80 91 8c 01 	lds	r24, 0x018C
    2884:	84 36       	cpi	r24, 0x64	; 100
    2886:	50 f0       	brcs	.+20     	; 0x289c <MoveServo180Degrees+0xa0>
		Local_u8IncFlag = !Local_u8IncFlag;
    2888:	80 91 7e 01 	lds	r24, 0x017E
    288c:	18 8a       	std	Y+16, r1	; 0x10
    288e:	88 23       	and	r24, r24
    2890:	11 f4       	brne	.+4      	; 0x2896 <MoveServo180Degrees+0x9a>
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	98 8b       	std	Y+16, r25	; 0x10
    2896:	28 89       	ldd	r18, Y+16	; 0x10
    2898:	20 93 7e 01 	sts	0x017E, r18
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	a8 e4       	ldi	r26, 0x48	; 72
    28a2:	b3 e4       	ldi	r27, 0x43	; 67
    28a4:	8b 87       	std	Y+11, r24	; 0x0b
    28a6:	9c 87       	std	Y+12, r25	; 0x0c
    28a8:	ad 87       	std	Y+13, r26	; 0x0d
    28aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	4a e7       	ldi	r20, 0x7A	; 122
    28ba:	55 e4       	ldi	r21, 0x45	; 69
    28bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	8f 83       	std	Y+7, r24	; 0x07
    28c6:	98 87       	std	Y+8, r25	; 0x08
    28c8:	a9 87       	std	Y+9, r26	; 0x09
    28ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e0:	88 23       	and	r24, r24
    28e2:	2c f4       	brge	.+10     	; 0x28ee <MoveServo180Degrees+0xf2>
		__ticks = 1;
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	9e 83       	std	Y+6, r25	; 0x06
    28ea:	8d 83       	std	Y+5, r24	; 0x05
    28ec:	3f c0       	rjmp	.+126    	; 0x296c <MoveServo180Degrees+0x170>
	else if (__tmp > 65535)
    28ee:	6f 81       	ldd	r22, Y+7	; 0x07
    28f0:	78 85       	ldd	r23, Y+8	; 0x08
    28f2:	89 85       	ldd	r24, Y+9	; 0x09
    28f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	3f ef       	ldi	r19, 0xFF	; 255
    28fa:	4f e7       	ldi	r20, 0x7F	; 127
    28fc:	57 e4       	ldi	r21, 0x47	; 71
    28fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2902:	18 16       	cp	r1, r24
    2904:	4c f5       	brge	.+82     	; 0x2958 <MoveServo180Degrees+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2906:	6b 85       	ldd	r22, Y+11	; 0x0b
    2908:	7c 85       	ldd	r23, Y+12	; 0x0c
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	0f c0       	rjmp	.+30     	; 0x294e <MoveServo180Degrees+0x152>
    2930:	80 e9       	ldi	r24, 0x90	; 144
    2932:	91 e0       	ldi	r25, 0x01	; 1
    2934:	9c 83       	std	Y+4, r25	; 0x04
    2936:	8b 83       	std	Y+3, r24	; 0x03
    2938:	8b 81       	ldd	r24, Y+3	; 0x03
    293a:	9c 81       	ldd	r25, Y+4	; 0x04
    293c:	01 97       	sbiw	r24, 0x01	; 1
    293e:	f1 f7       	brne	.-4      	; 0x293c <MoveServo180Degrees+0x140>
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	01 97       	sbiw	r24, 0x01	; 1
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294e:	8d 81       	ldd	r24, Y+5	; 0x05
    2950:	9e 81       	ldd	r25, Y+6	; 0x06
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	69 f7       	brne	.-38     	; 0x2930 <MoveServo180Degrees+0x134>
    2956:	14 c0       	rjmp	.+40     	; 0x2980 <MoveServo180Degrees+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2958:	6f 81       	ldd	r22, Y+7	; 0x07
    295a:	78 85       	ldd	r23, Y+8	; 0x08
    295c:	89 85       	ldd	r24, Y+9	; 0x09
    295e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2960:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2964:	dc 01       	movw	r26, r24
    2966:	cb 01       	movw	r24, r22
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	9a 83       	std	Y+2, r25	; 0x02
    2972:	89 83       	std	Y+1, r24	; 0x01
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	9a 81       	ldd	r25, Y+2	; 0x02
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <MoveServo180Degrees+0x17c>
    297c:	9a 83       	std	Y+2, r25	; 0x02
    297e:	89 83       	std	Y+1, r24	; 0x01
	else{
		/* nothing */
	}
	_delay_ms(SERVO_u8_DELAY);
	return Local_u8Direction;
    2980:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2982:	62 96       	adiw	r28, 0x12	; 18
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <voidInitMotors>:


void voidInitMotors(){
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	/* sets port and pin numbers of the connected motors */
	MOTOR1.motor_u8_port = DIO_u8_PORTC;
    299c:	80 91 8f 01 	lds	r24, 0x018F
    29a0:	80 7f       	andi	r24, 0xF0	; 240
    29a2:	82 60       	ori	r24, 0x02	; 2
    29a4:	80 93 8f 01 	sts	0x018F, r24
	MOTOR1.motor_u8_pin1 = DIO_u8_PIN3;
    29a8:	80 91 8f 01 	lds	r24, 0x018F
    29ac:	8f 70       	andi	r24, 0x0F	; 15
    29ae:	80 63       	ori	r24, 0x30	; 48
    29b0:	80 93 8f 01 	sts	0x018F, r24
	MOTOR1.motor_u8_pin2 = DIO_u8_PIN4;
    29b4:	80 91 90 01 	lds	r24, 0x0190
    29b8:	80 7f       	andi	r24, 0xF0	; 240
    29ba:	84 60       	ori	r24, 0x04	; 4
    29bc:	80 93 90 01 	sts	0x0190, r24

	MOTOR2.motor_u8_port = DIO_u8_PORTC;
    29c0:	80 91 8d 01 	lds	r24, 0x018D
    29c4:	80 7f       	andi	r24, 0xF0	; 240
    29c6:	82 60       	ori	r24, 0x02	; 2
    29c8:	80 93 8d 01 	sts	0x018D, r24
	MOTOR2.motor_u8_pin1 = DIO_u8_PIN5;
    29cc:	80 91 8d 01 	lds	r24, 0x018D
    29d0:	8f 70       	andi	r24, 0x0F	; 15
    29d2:	80 65       	ori	r24, 0x50	; 80
    29d4:	80 93 8d 01 	sts	0x018D, r24
	MOTOR2.motor_u8_pin2 = DIO_u8_PIN6;
    29d8:	80 91 8e 01 	lds	r24, 0x018E
    29dc:	80 7f       	andi	r24, 0xF0	; 240
    29de:	86 60       	ori	r24, 0x06	; 6
    29e0:	80 93 8e 01 	sts	0x018E, r24
}
    29e4:	cf 91       	pop	r28
    29e6:	df 91       	pop	r29
    29e8:	08 95       	ret

000029ea <voidCheckObstacle_MoveAccordingly>:



void voidCheckObstacle_MoveAccordingly(uint32 Copy_32USSDistance, uint8 Copy_u8Dirction){
    29ea:	df 93       	push	r29
    29ec:	cf 93       	push	r28
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	e1 97       	sbiw	r28, 0x31	; 49
    29f4:	0f b6       	in	r0, 0x3f	; 63
    29f6:	f8 94       	cli
    29f8:	de bf       	out	0x3e, r29	; 62
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	cd bf       	out	0x3d, r28	; 61
    29fe:	6b a7       	std	Y+43, r22	; 0x2b
    2a00:	7c a7       	std	Y+44, r23	; 0x2c
    2a02:	8d a7       	std	Y+45, r24	; 0x2d
    2a04:	9e a7       	std	Y+46, r25	; 0x2e
    2a06:	4f a7       	std	Y+47, r20	; 0x2f
	/* 	check if ultrasonic measured distance (Copy_32USSDistance) lower than the critical value
	 *	if true then move according to the direction of Servo motor (Copy_u8Dirction)
	 */
	if(Copy_32USSDistance <= CRITICAL_u8_DISTANCE){
    2a08:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a0a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a0c:	ad a5       	ldd	r26, Y+45	; 0x2d
    2a0e:	be a5       	ldd	r27, Y+46	; 0x2e
    2a10:	81 35       	cpi	r24, 0x51	; 81
    2a12:	91 05       	cpc	r25, r1
    2a14:	a1 05       	cpc	r26, r1
    2a16:	b1 05       	cpc	r27, r1
    2a18:	08 f0       	brcs	.+2      	; 0x2a1c <voidCheckObstacle_MoveAccordingly+0x32>
    2a1a:	9b c1       	rjmp	.+822    	; 0x2d52 <voidCheckObstacle_MoveAccordingly+0x368>
		MOTOR_voidSetMotorsPWMDutyCycle(100);
    2a1c:	84 e6       	ldi	r24, 0x64	; 100
    2a1e:	0e 94 0b 11 	call	0x2216	; 0x2216 <MOTOR_voidSetMotorsPWMDutyCycle>
		switch(Copy_u8Dirction){
    2a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a24:	28 2f       	mov	r18, r24
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	39 ab       	std	Y+49, r19	; 0x31
    2a2a:	28 ab       	std	Y+48, r18	; 0x30
    2a2c:	88 a9       	ldd	r24, Y+48	; 0x30
    2a2e:	99 a9       	ldd	r25, Y+49	; 0x31
    2a30:	8c 34       	cpi	r24, 0x4C	; 76
    2a32:	91 05       	cpc	r25, r1
    2a34:	69 f0       	breq	.+26     	; 0x2a50 <voidCheckObstacle_MoveAccordingly+0x66>
    2a36:	28 a9       	ldd	r18, Y+48	; 0x30
    2a38:	39 a9       	ldd	r19, Y+49	; 0x31
    2a3a:	22 35       	cpi	r18, 0x52	; 82
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	09 f4       	brne	.+2      	; 0x2a42 <voidCheckObstacle_MoveAccordingly+0x58>
    2a40:	87 c0       	rjmp	.+270    	; 0x2b50 <voidCheckObstacle_MoveAccordingly+0x166>
    2a42:	88 a9       	ldd	r24, Y+48	; 0x30
    2a44:	99 a9       	ldd	r25, Y+49	; 0x31
    2a46:	83 34       	cpi	r24, 0x43	; 67
    2a48:	91 05       	cpc	r25, r1
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <voidCheckObstacle_MoveAccordingly+0x64>
    2a4c:	01 c1       	rjmp	.+514    	; 0x2c50 <voidCheckObstacle_MoveAccordingly+0x266>
    2a4e:	92 c1       	rjmp	.+804    	; 0x2d74 <voidCheckObstacle_MoveAccordingly+0x38a>
		case 'L':
			MOTOR_u8MoveMotor(MOTOR1, MOTOR_u8_ANTICLOCKWISE);
    2a50:	80 91 8f 01 	lds	r24, 0x018F
    2a54:	90 91 90 01 	lds	r25, 0x0190
    2a58:	61 e0       	ldi	r22, 0x01	; 1
    2a5a:	0e 94 92 10 	call	0x2124	; 0x2124 <MOTOR_u8MoveMotor>
			MOTOR_voidStopMotor(MOTOR2);
    2a5e:	80 91 8d 01 	lds	r24, 0x018D
    2a62:	90 91 8e 01 	lds	r25, 0x018E
    2a66:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <MOTOR_voidStopMotor>
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	aa e7       	ldi	r26, 0x7A	; 122
    2a70:	b4 e4       	ldi	r27, 0x44	; 68
    2a72:	8f a3       	std	Y+39, r24	; 0x27
    2a74:	98 a7       	std	Y+40, r25	; 0x28
    2a76:	a9 a7       	std	Y+41, r26	; 0x29
    2a78:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	4a e7       	ldi	r20, 0x7A	; 122
    2a88:	55 e4       	ldi	r21, 0x45	; 69
    2a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	8b a3       	std	Y+35, r24	; 0x23
    2a94:	9c a3       	std	Y+36, r25	; 0x24
    2a96:	ad a3       	std	Y+37, r26	; 0x25
    2a98:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	40 e8       	ldi	r20, 0x80	; 128
    2aa8:	5f e3       	ldi	r21, 0x3F	; 63
    2aaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aae:	88 23       	and	r24, r24
    2ab0:	2c f4       	brge	.+10     	; 0x2abc <voidCheckObstacle_MoveAccordingly+0xd2>
		__ticks = 1;
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	9a a3       	std	Y+34, r25	; 0x22
    2ab8:	89 a3       	std	Y+33, r24	; 0x21
    2aba:	3f c0       	rjmp	.+126    	; 0x2b3a <voidCheckObstacle_MoveAccordingly+0x150>
	else if (__tmp > 65535)
    2abc:	6b a1       	ldd	r22, Y+35	; 0x23
    2abe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	3f ef       	ldi	r19, 0xFF	; 255
    2ac8:	4f e7       	ldi	r20, 0x7F	; 127
    2aca:	57 e4       	ldi	r21, 0x47	; 71
    2acc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad0:	18 16       	cp	r1, r24
    2ad2:	4c f5       	brge	.+82     	; 0x2b26 <voidCheckObstacle_MoveAccordingly+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ad6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ad8:	89 a5       	ldd	r24, Y+41	; 0x29
    2ada:	9a a5       	ldd	r25, Y+42	; 0x2a
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e2       	ldi	r20, 0x20	; 32
    2ae2:	51 e4       	ldi	r21, 0x41	; 65
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	bc 01       	movw	r22, r24
    2aee:	cd 01       	movw	r24, r26
    2af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	9a a3       	std	Y+34, r25	; 0x22
    2afa:	89 a3       	std	Y+33, r24	; 0x21
    2afc:	0f c0       	rjmp	.+30     	; 0x2b1c <voidCheckObstacle_MoveAccordingly+0x132>
    2afe:	80 e9       	ldi	r24, 0x90	; 144
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	98 a3       	std	Y+32, r25	; 0x20
    2b04:	8f 8f       	std	Y+31, r24	; 0x1f
    2b06:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b08:	98 a1       	ldd	r25, Y+32	; 0x20
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <voidCheckObstacle_MoveAccordingly+0x120>
    2b0e:	98 a3       	std	Y+32, r25	; 0x20
    2b10:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b12:	89 a1       	ldd	r24, Y+33	; 0x21
    2b14:	9a a1       	ldd	r25, Y+34	; 0x22
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9a a3       	std	Y+34, r25	; 0x22
    2b1a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	69 f7       	brne	.-38     	; 0x2afe <voidCheckObstacle_MoveAccordingly+0x114>
    2b24:	27 c1       	rjmp	.+590    	; 0x2d74 <voidCheckObstacle_MoveAccordingly+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b26:	6b a1       	ldd	r22, Y+35	; 0x23
    2b28:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	9a a3       	std	Y+34, r25	; 0x22
    2b38:	89 a3       	std	Y+33, r24	; 0x21
    2b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b40:	8d 8f       	std	Y+29, r24	; 0x1d
    2b42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b44:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <voidCheckObstacle_MoveAccordingly+0x15c>
    2b4a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b4c:	8d 8f       	std	Y+29, r24	; 0x1d
    2b4e:	12 c1       	rjmp	.+548    	; 0x2d74 <voidCheckObstacle_MoveAccordingly+0x38a>
			_delay_ms(CAR_u16_OBSTCALE_SKIP_TIME);
			break;
		case 'R':
			MOTOR_u8MoveMotor(MOTOR2, MOTOR_u8_ANTICLOCKWISE);
    2b50:	80 91 8d 01 	lds	r24, 0x018D
    2b54:	90 91 8e 01 	lds	r25, 0x018E
    2b58:	61 e0       	ldi	r22, 0x01	; 1
    2b5a:	0e 94 92 10 	call	0x2124	; 0x2124 <MOTOR_u8MoveMotor>
			MOTOR_voidStopMotor(MOTOR1);
    2b5e:	80 91 8f 01 	lds	r24, 0x018F
    2b62:	90 91 90 01 	lds	r25, 0x0190
    2b66:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <MOTOR_voidStopMotor>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	aa e7       	ldi	r26, 0x7A	; 122
    2b70:	b4 e4       	ldi	r27, 0x44	; 68
    2b72:	89 8f       	std	Y+25, r24	; 0x19
    2b74:	9a 8f       	std	Y+26, r25	; 0x1a
    2b76:	ab 8f       	std	Y+27, r26	; 0x1b
    2b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a e7       	ldi	r20, 0x7A	; 122
    2b88:	55 e4       	ldi	r21, 0x45	; 69
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8d 8b       	std	Y+21, r24	; 0x15
    2b94:	9e 8b       	std	Y+22, r25	; 0x16
    2b96:	af 8b       	std	Y+23, r26	; 0x17
    2b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	2c f4       	brge	.+10     	; 0x2bbc <voidCheckObstacle_MoveAccordingly+0x1d2>
		__ticks = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	8b 8b       	std	Y+19, r24	; 0x13
    2bba:	3f c0       	rjmp	.+126    	; 0x2c3a <voidCheckObstacle_MoveAccordingly+0x250>
	else if (__tmp > 65535)
    2bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	4f e7       	ldi	r20, 0x7F	; 127
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bd0:	18 16       	cp	r1, r24
    2bd2:	4c f5       	brge	.+82     	; 0x2c26 <voidCheckObstacle_MoveAccordingly+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	51 e4       	ldi	r21, 0x41	; 65
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9c 8b       	std	Y+20, r25	; 0x14
    2bfa:	8b 8b       	std	Y+19, r24	; 0x13
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <voidCheckObstacle_MoveAccordingly+0x232>
    2bfe:	80 e9       	ldi	r24, 0x90	; 144
    2c00:	91 e0       	ldi	r25, 0x01	; 1
    2c02:	9a 8b       	std	Y+18, r25	; 0x12
    2c04:	89 8b       	std	Y+17, r24	; 0x11
    2c06:	89 89       	ldd	r24, Y+17	; 0x11
    2c08:	9a 89       	ldd	r25, Y+18	; 0x12
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <voidCheckObstacle_MoveAccordingly+0x220>
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c12:	8b 89       	ldd	r24, Y+19	; 0x13
    2c14:	9c 89       	ldd	r25, Y+20	; 0x14
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	69 f7       	brne	.-38     	; 0x2bfe <voidCheckObstacle_MoveAccordingly+0x214>
    2c24:	a7 c0       	rjmp	.+334    	; 0x2d74 <voidCheckObstacle_MoveAccordingly+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c26:	6d 89       	ldd	r22, Y+21	; 0x15
    2c28:	7e 89       	ldd	r23, Y+22	; 0x16
    2c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9c 8b       	std	Y+20, r25	; 0x14
    2c38:	8b 8b       	std	Y+19, r24	; 0x13
    2c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3e:	98 8b       	std	Y+16, r25	; 0x10
    2c40:	8f 87       	std	Y+15, r24	; 0x0f
    2c42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c44:	98 89       	ldd	r25, Y+16	; 0x10
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <voidCheckObstacle_MoveAccordingly+0x25c>
    2c4a:	98 8b       	std	Y+16, r25	; 0x10
    2c4c:	8f 87       	std	Y+15, r24	; 0x0f
    2c4e:	92 c0       	rjmp	.+292    	; 0x2d74 <voidCheckObstacle_MoveAccordingly+0x38a>
			_delay_ms(CAR_u16_OBSTCALE_SKIP_TIME);
			break;
		case 'C':
			MOTOR_u8MoveMotor(MOTOR1, MOTOR_u8_ANTICLOCKWISE);
    2c50:	80 91 8f 01 	lds	r24, 0x018F
    2c54:	90 91 90 01 	lds	r25, 0x0190
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	0e 94 92 10 	call	0x2124	; 0x2124 <MOTOR_u8MoveMotor>
			MOTOR_u8MoveMotor(MOTOR2, MOTOR_u8_CLOCKWISE);
    2c5e:	80 91 8d 01 	lds	r24, 0x018D
    2c62:	90 91 8e 01 	lds	r25, 0x018E
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	0e 94 92 10 	call	0x2124	; 0x2124 <MOTOR_u8MoveMotor>
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	aa e7       	ldi	r26, 0x7A	; 122
    2c72:	b4 e4       	ldi	r27, 0x44	; 68
    2c74:	8b 87       	std	Y+11, r24	; 0x0b
    2c76:	9c 87       	std	Y+12, r25	; 0x0c
    2c78:	ad 87       	std	Y+13, r26	; 0x0d
    2c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	4a e7       	ldi	r20, 0x7A	; 122
    2c8a:	55 e4       	ldi	r21, 0x45	; 69
    2c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	8f 83       	std	Y+7, r24	; 0x07
    2c96:	98 87       	std	Y+8, r25	; 0x08
    2c98:	a9 87       	std	Y+9, r26	; 0x09
    2c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e8       	ldi	r20, 0x80	; 128
    2caa:	5f e3       	ldi	r21, 0x3F	; 63
    2cac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb0:	88 23       	and	r24, r24
    2cb2:	2c f4       	brge	.+10     	; 0x2cbe <voidCheckObstacle_MoveAccordingly+0x2d4>
		__ticks = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	3f c0       	rjmp	.+126    	; 0x2d3c <voidCheckObstacle_MoveAccordingly+0x352>
	else if (__tmp > 65535)
    2cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc0:	78 85       	ldd	r23, Y+8	; 0x08
    2cc2:	89 85       	ldd	r24, Y+9	; 0x09
    2cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	3f ef       	ldi	r19, 0xFF	; 255
    2cca:	4f e7       	ldi	r20, 0x7F	; 127
    2ccc:	57 e4       	ldi	r21, 0x47	; 71
    2cce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd2:	18 16       	cp	r1, r24
    2cd4:	4c f5       	brge	.+82     	; 0x2d28 <voidCheckObstacle_MoveAccordingly+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e2       	ldi	r20, 0x20	; 32
    2ce4:	51 e4       	ldi	r21, 0x41	; 65
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	bc 01       	movw	r22, r24
    2cf0:	cd 01       	movw	r24, r26
    2cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
    2cfe:	0f c0       	rjmp	.+30     	; 0x2d1e <voidCheckObstacle_MoveAccordingly+0x334>
    2d00:	80 e9       	ldi	r24, 0x90	; 144
    2d02:	91 e0       	ldi	r25, 0x01	; 1
    2d04:	9c 83       	std	Y+4, r25	; 0x04
    2d06:	8b 83       	std	Y+3, r24	; 0x03
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d0c:	01 97       	sbiw	r24, 0x01	; 1
    2d0e:	f1 f7       	brne	.-4      	; 0x2d0c <voidCheckObstacle_MoveAccordingly+0x322>
    2d10:	9c 83       	std	Y+4, r25	; 0x04
    2d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	9e 83       	std	Y+6, r25	; 0x06
    2d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d20:	9e 81       	ldd	r25, Y+6	; 0x06
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	69 f7       	brne	.-38     	; 0x2d00 <voidCheckObstacle_MoveAccordingly+0x316>
    2d26:	26 c0       	rjmp	.+76     	; 0x2d74 <voidCheckObstacle_MoveAccordingly+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d28:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2a:	78 85       	ldd	r23, Y+8	; 0x08
    2d2c:	89 85       	ldd	r24, Y+9	; 0x09
    2d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d40:	9a 83       	std	Y+2, r25	; 0x02
    2d42:	89 83       	std	Y+1, r24	; 0x01
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	9a 81       	ldd	r25, Y+2	; 0x02
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	f1 f7       	brne	.-4      	; 0x2d48 <voidCheckObstacle_MoveAccordingly+0x35e>
    2d4c:	9a 83       	std	Y+2, r25	; 0x02
    2d4e:	89 83       	std	Y+1, r24	; 0x01
    2d50:	11 c0       	rjmp	.+34     	; 0x2d74 <voidCheckObstacle_MoveAccordingly+0x38a>
			_delay_ms(CAR_u16_OBSTCALE_SKIP_TIME);
		}
	}
	else{
		/* set speed of the motor by chaning dutycycle */
		MOTOR_voidSetMotorsPWMDutyCycle(100);
    2d52:	84 e6       	ldi	r24, 0x64	; 100
    2d54:	0e 94 0b 11 	call	0x2216	; 0x2216 <MOTOR_voidSetMotorsPWMDutyCycle>
		MOTOR_u8MoveMotor(MOTOR1, MOTOR_u8_CLOCKWISE);
    2d58:	80 91 8f 01 	lds	r24, 0x018F
    2d5c:	90 91 90 01 	lds	r25, 0x0190
    2d60:	60 e0       	ldi	r22, 0x00	; 0
    2d62:	0e 94 92 10 	call	0x2124	; 0x2124 <MOTOR_u8MoveMotor>
		MOTOR_u8MoveMotor(MOTOR2, MOTOR_u8_CLOCKWISE);
    2d66:	80 91 8d 01 	lds	r24, 0x018D
    2d6a:	90 91 8e 01 	lds	r25, 0x018E
    2d6e:	60 e0       	ldi	r22, 0x00	; 0
    2d70:	0e 94 92 10 	call	0x2124	; 0x2124 <MOTOR_u8MoveMotor>
	}

}
    2d74:	e1 96       	adiw	r28, 0x31	; 49
    2d76:	0f b6       	in	r0, 0x3f	; 63
    2d78:	f8 94       	cli
    2d7a:	de bf       	out	0x3e, r29	; 62
    2d7c:	0f be       	out	0x3f, r0	; 63
    2d7e:	cd bf       	out	0x3d, r28	; 61
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <charptrCarDirection>:

char* charptrCarDirection(uint32 Copy_32USSDistance, uint8 Copy_u8Dirction){
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	27 97       	sbiw	r28, 0x07	; 7
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	69 83       	std	Y+1, r22	; 0x01
    2d9c:	7a 83       	std	Y+2, r23	; 0x02
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
    2da0:	9c 83       	std	Y+4, r25	; 0x04
    2da2:	4d 83       	std	Y+5, r20	; 0x05
	/* this function returns a string of 3 letters descriping the current
	 * direction the car is taking
	 */
	static char Local_carDir[3] = "F \0";
	Local_carDir[0] = 'F';
    2da4:	86 e4       	ldi	r24, 0x46	; 70
    2da6:	80 93 7f 01 	sts	0x017F, r24
	Local_carDir[1] = ' ';
    2daa:	80 e2       	ldi	r24, 0x20	; 32
    2dac:	80 93 80 01 	sts	0x0180, r24
	if(Copy_32USSDistance <= CRITICAL_u8_DISTANCE){
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	9a 81       	ldd	r25, Y+2	; 0x02
    2db4:	ab 81       	ldd	r26, Y+3	; 0x03
    2db6:	bc 81       	ldd	r27, Y+4	; 0x04
    2db8:	81 35       	cpi	r24, 0x51	; 81
    2dba:	91 05       	cpc	r25, r1
    2dbc:	a1 05       	cpc	r26, r1
    2dbe:	b1 05       	cpc	r27, r1
    2dc0:	48 f5       	brcc	.+82     	; 0x2e14 <charptrCarDirection+0x8e>
		switch(Copy_u8Dirction){
    2dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	3f 83       	std	Y+7, r19	; 0x07
    2dca:	2e 83       	std	Y+6, r18	; 0x06
    2dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dce:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd0:	8c 34       	cpi	r24, 0x4C	; 76
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	59 f0       	breq	.+22     	; 0x2dec <charptrCarDirection+0x66>
    2dd6:	2e 81       	ldd	r18, Y+6	; 0x06
    2dd8:	3f 81       	ldd	r19, Y+7	; 0x07
    2dda:	22 35       	cpi	r18, 0x52	; 82
    2ddc:	31 05       	cpc	r19, r1
    2dde:	69 f0       	breq	.+26     	; 0x2dfa <charptrCarDirection+0x74>
    2de0:	8e 81       	ldd	r24, Y+6	; 0x06
    2de2:	9f 81       	ldd	r25, Y+7	; 0x07
    2de4:	83 34       	cpi	r24, 0x43	; 67
    2de6:	91 05       	cpc	r25, r1
    2de8:	79 f0       	breq	.+30     	; 0x2e08 <charptrCarDirection+0x82>
    2dea:	14 c0       	rjmp	.+40     	; 0x2e14 <charptrCarDirection+0x8e>
		case 'L':
			/* Backward - Right */
			Local_carDir[0] = 'B';
    2dec:	82 e4       	ldi	r24, 0x42	; 66
    2dee:	80 93 7f 01 	sts	0x017F, r24
			Local_carDir[1] = 'R';
    2df2:	82 e5       	ldi	r24, 0x52	; 82
    2df4:	80 93 80 01 	sts	0x0180, r24
    2df8:	0d c0       	rjmp	.+26     	; 0x2e14 <charptrCarDirection+0x8e>
			break;
		case 'R':
			/* Backward - Left */
			Local_carDir[0] = 'B';
    2dfa:	82 e4       	ldi	r24, 0x42	; 66
    2dfc:	80 93 7f 01 	sts	0x017F, r24
			Local_carDir[1] = 'L';
    2e00:	8c e4       	ldi	r24, 0x4C	; 76
    2e02:	80 93 80 01 	sts	0x0180, r24
    2e06:	06 c0       	rjmp	.+12     	; 0x2e14 <charptrCarDirection+0x8e>
			break;
		case 'C':
			/* rotate arount it self */
			Local_carDir[0] = 'R';
    2e08:	82 e5       	ldi	r24, 0x52	; 82
    2e0a:	80 93 7f 01 	sts	0x017F, r24
			Local_carDir[1] = 'R';
    2e0e:	82 e5       	ldi	r24, 0x52	; 82
    2e10:	80 93 80 01 	sts	0x0180, r24
			break;
		}
	}
	Local_carDir[2] = '\0';
    2e14:	10 92 81 01 	sts	0x0181, r1
	return Local_carDir;
    2e18:	8f e7       	ldi	r24, 0x7F	; 127
    2e1a:	91 e0       	ldi	r25, 0x01	; 1
}
    2e1c:	27 96       	adiw	r28, 0x07	; 7
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	cf 91       	pop	r28
    2e2a:	df 91       	pop	r29
    2e2c:	08 95       	ret

00002e2e <main>:

int main(){
    2e2e:	df 93       	push	r29
    2e30:	cf 93       	push	r28
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	65 97       	sbiw	r28, 0x15	; 21
    2e38:	0f b6       	in	r0, 0x3f	; 63
    2e3a:	f8 94       	cli
    2e3c:	de bf       	out	0x3e, r29	; 62
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	cd bf       	out	0x3d, r28	; 61
	/* Init directions and initial values configured in PORT_config.h file */
	PORT_voidInit();
    2e42:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <PORT_voidInit>
	/* Init CLCD 8bit mode */
	CLCD_voidInit();
    2e46:	0e 94 17 12 	call	0x242e	; 0x242e <CLCD_voidInit>
	/* init ultra sonic sensor
	 *  - enables Global interrupt
	 *  - enables overflow interrupt for timer 1
	 *  - start count
	 */
	USS_voidInit();
    2e4a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <USS_voidInit>
	/*  init PWM of timer0 fast PWM, inverted */
	PWM0_VoidInit();
    2e4e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <PWM0_VoidInit>
	/*  Call Motor init function in main file */
	voidInitMotors();
    2e52:	0e 94 ca 14 	call	0x2994	; 0x2994 <voidInitMotors>
	while(1){
		/* Moves the servo 0 to 90 to 180 and back */
		uint8 Local_u8ServoDirection = MoveServo180Degrees();
    2e56:	0e 94 fe 13 	call	0x27fc	; 0x27fc <MoveServo180Degrees>
    2e5a:	8d 8b       	std	Y+21, r24	; 0x15
		/* get distance in cm from ultra sonic sensor */
		uint32 Local_u32distance = USS_u32GetDistance();
    2e5c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <USS_u32GetDistance>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	89 8b       	std	Y+17, r24	; 0x11
    2e66:	9a 8b       	std	Y+18, r25	; 0x12
    2e68:	ab 8b       	std	Y+19, r26	; 0x13
    2e6a:	bc 8b       	std	Y+20, r27	; 0x14
		CLCD_sendString("distance:");
    2e6c:	80 e6       	ldi	r24, 0x60	; 96
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 b1 12 	call	0x2562	; 0x2562 <CLCD_sendString>
		/* print distance of ultrasonic to CLCD */
		CLCD_sendNumebr((uint32)Local_u32distance);
    2e74:	89 89       	ldd	r24, Y+17	; 0x11
    2e76:	9a 89       	ldd	r25, Y+18	; 0x12
    2e78:	ab 89       	ldd	r26, Y+19	; 0x13
    2e7a:	bc 89       	ldd	r27, Y+20	; 0x14
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	cd 01       	movw	r24, r26
    2e80:	0e 94 e7 12 	call	0x25ce	; 0x25ce <CLCD_sendNumebr>
		/* Newline */
		CLCD_voidGoToXY(0, 1);
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	61 e0       	ldi	r22, 0x01	; 1
    2e88:	0e 94 88 13 	call	0x2710	; 0x2710 <CLCD_voidGoToXY>
		CLCD_sendString("srvo:");
    2e8c:	8a e6       	ldi	r24, 0x6A	; 106
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	0e 94 b1 12 	call	0x2562	; 0x2562 <CLCD_sendString>
		/* print current servo direction on CLCD */
		CLCD_voidSendData(Local_u8ServoDirection);
    2e94:	8d 89       	ldd	r24, Y+21	; 0x15
    2e96:	0e 94 f7 11 	call	0x23ee	; 0x23ee <CLCD_voidSendData>
		CLCD_sendString(" dir:");
    2e9a:	80 e7       	ldi	r24, 0x70	; 112
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 b1 12 	call	0x2562	; 0x2562 <CLCD_sendString>
		char* Local_charptrCarDir = charptrCarDirection
				(Local_u32distance, Local_u8ServoDirection);
    2ea2:	89 89       	ldd	r24, Y+17	; 0x11
    2ea4:	9a 89       	ldd	r25, Y+18	; 0x12
    2ea6:	ab 89       	ldd	r26, Y+19	; 0x13
    2ea8:	bc 89       	ldd	r27, Y+20	; 0x14
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	4d 89       	ldd	r20, Y+21	; 0x15
    2eb0:	0e 94 c3 16 	call	0x2d86	; 0x2d86 <charptrCarDirection>
    2eb4:	98 8b       	std	Y+16, r25	; 0x10
    2eb6:	8f 87       	std	Y+15, r24	; 0x0f
		/* print current car direction to CLCD */
		CLCD_sendString(Local_charptrCarDir);
    2eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eba:	98 89       	ldd	r25, Y+16	; 0x10
    2ebc:	0e 94 b1 12 	call	0x2562	; 0x2562 <CLCD_sendString>
		voidCheckObstacle_MoveAccordingly(Local_u32distance, Local_u8ServoDirection);
    2ec0:	89 89       	ldd	r24, Y+17	; 0x11
    2ec2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ec4:	ab 89       	ldd	r26, Y+19	; 0x13
    2ec6:	bc 89       	ldd	r27, Y+20	; 0x14
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	4d 89       	ldd	r20, Y+21	; 0x15
    2ece:	0e 94 f5 14 	call	0x29ea	; 0x29ea <voidCheckObstacle_MoveAccordingly>
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	aa ef       	ldi	r26, 0xFA	; 250
    2ed8:	b3 e4       	ldi	r27, 0x43	; 67
    2eda:	8b 87       	std	Y+11, r24	; 0x0b
    2edc:	9c 87       	std	Y+12, r25	; 0x0c
    2ede:	ad 87       	std	Y+13, r26	; 0x0d
    2ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	4a e7       	ldi	r20, 0x7A	; 122
    2ef0:	55 e4       	ldi	r21, 0x45	; 69
    2ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	8f 83       	std	Y+7, r24	; 0x07
    2efc:	98 87       	std	Y+8, r25	; 0x08
    2efe:	a9 87       	std	Y+9, r26	; 0x09
    2f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f02:	6f 81       	ldd	r22, Y+7	; 0x07
    2f04:	78 85       	ldd	r23, Y+8	; 0x08
    2f06:	89 85       	ldd	r24, Y+9	; 0x09
    2f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5f e3       	ldi	r21, 0x3F	; 63
    2f12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f16:	88 23       	and	r24, r24
    2f18:	2c f4       	brge	.+10     	; 0x2f24 <main+0xf6>
		__ticks = 1;
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	9e 83       	std	Y+6, r25	; 0x06
    2f20:	8d 83       	std	Y+5, r24	; 0x05
    2f22:	3f c0       	rjmp	.+126    	; 0x2fa2 <main+0x174>
	else if (__tmp > 65535)
    2f24:	6f 81       	ldd	r22, Y+7	; 0x07
    2f26:	78 85       	ldd	r23, Y+8	; 0x08
    2f28:	89 85       	ldd	r24, Y+9	; 0x09
    2f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	3f ef       	ldi	r19, 0xFF	; 255
    2f30:	4f e7       	ldi	r20, 0x7F	; 127
    2f32:	57 e4       	ldi	r21, 0x47	; 71
    2f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f38:	18 16       	cp	r1, r24
    2f3a:	4c f5       	brge	.+82     	; 0x2f8e <main+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	40 e2       	ldi	r20, 0x20	; 32
    2f4a:	51 e4       	ldi	r21, 0x41	; 65
    2f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	bc 01       	movw	r22, r24
    2f56:	cd 01       	movw	r24, r26
    2f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	9e 83       	std	Y+6, r25	; 0x06
    2f62:	8d 83       	std	Y+5, r24	; 0x05
    2f64:	0f c0       	rjmp	.+30     	; 0x2f84 <main+0x156>
    2f66:	80 e9       	ldi	r24, 0x90	; 144
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	9c 83       	std	Y+4, r25	; 0x04
    2f6c:	8b 83       	std	Y+3, r24	; 0x03
    2f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f70:	9c 81       	ldd	r25, Y+4	; 0x04
    2f72:	01 97       	sbiw	r24, 0x01	; 1
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <main+0x144>
    2f76:	9c 83       	std	Y+4, r25	; 0x04
    2f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	9e 83       	std	Y+6, r25	; 0x06
    2f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f84:	8d 81       	ldd	r24, Y+5	; 0x05
    2f86:	9e 81       	ldd	r25, Y+6	; 0x06
    2f88:	00 97       	sbiw	r24, 0x00	; 0
    2f8a:	69 f7       	brne	.-38     	; 0x2f66 <main+0x138>
    2f8c:	14 c0       	rjmp	.+40     	; 0x2fb6 <main+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f90:	78 85       	ldd	r23, Y+8	; 0x08
    2f92:	89 85       	ldd	r24, Y+9	; 0x09
    2f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	9e 83       	std	Y+6, r25	; 0x06
    2fa0:	8d 83       	std	Y+5, r24	; 0x05
    2fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <main+0x180>
    2fb2:	9a 83       	std	Y+2, r25	; 0x02
    2fb4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/* clear CLCD */
		CLCD_voidClearDisplay();
    2fb6:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <CLCD_voidClearDisplay>
    2fba:	4d cf       	rjmp	.-358    	; 0x2e56 <main+0x28>

00002fbc <__mulsi3>:
    2fbc:	62 9f       	mul	r22, r18
    2fbe:	d0 01       	movw	r26, r0
    2fc0:	73 9f       	mul	r23, r19
    2fc2:	f0 01       	movw	r30, r0
    2fc4:	82 9f       	mul	r24, r18
    2fc6:	e0 0d       	add	r30, r0
    2fc8:	f1 1d       	adc	r31, r1
    2fca:	64 9f       	mul	r22, r20
    2fcc:	e0 0d       	add	r30, r0
    2fce:	f1 1d       	adc	r31, r1
    2fd0:	92 9f       	mul	r25, r18
    2fd2:	f0 0d       	add	r31, r0
    2fd4:	83 9f       	mul	r24, r19
    2fd6:	f0 0d       	add	r31, r0
    2fd8:	74 9f       	mul	r23, r20
    2fda:	f0 0d       	add	r31, r0
    2fdc:	65 9f       	mul	r22, r21
    2fde:	f0 0d       	add	r31, r0
    2fe0:	99 27       	eor	r25, r25
    2fe2:	72 9f       	mul	r23, r18
    2fe4:	b0 0d       	add	r27, r0
    2fe6:	e1 1d       	adc	r30, r1
    2fe8:	f9 1f       	adc	r31, r25
    2fea:	63 9f       	mul	r22, r19
    2fec:	b0 0d       	add	r27, r0
    2fee:	e1 1d       	adc	r30, r1
    2ff0:	f9 1f       	adc	r31, r25
    2ff2:	bd 01       	movw	r22, r26
    2ff4:	cf 01       	movw	r24, r30
    2ff6:	11 24       	eor	r1, r1
    2ff8:	08 95       	ret

00002ffa <__udivmodsi4>:
    2ffa:	a1 e2       	ldi	r26, 0x21	; 33
    2ffc:	1a 2e       	mov	r1, r26
    2ffe:	aa 1b       	sub	r26, r26
    3000:	bb 1b       	sub	r27, r27
    3002:	fd 01       	movw	r30, r26
    3004:	0d c0       	rjmp	.+26     	; 0x3020 <__udivmodsi4_ep>

00003006 <__udivmodsi4_loop>:
    3006:	aa 1f       	adc	r26, r26
    3008:	bb 1f       	adc	r27, r27
    300a:	ee 1f       	adc	r30, r30
    300c:	ff 1f       	adc	r31, r31
    300e:	a2 17       	cp	r26, r18
    3010:	b3 07       	cpc	r27, r19
    3012:	e4 07       	cpc	r30, r20
    3014:	f5 07       	cpc	r31, r21
    3016:	20 f0       	brcs	.+8      	; 0x3020 <__udivmodsi4_ep>
    3018:	a2 1b       	sub	r26, r18
    301a:	b3 0b       	sbc	r27, r19
    301c:	e4 0b       	sbc	r30, r20
    301e:	f5 0b       	sbc	r31, r21

00003020 <__udivmodsi4_ep>:
    3020:	66 1f       	adc	r22, r22
    3022:	77 1f       	adc	r23, r23
    3024:	88 1f       	adc	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	1a 94       	dec	r1
    302a:	69 f7       	brne	.-38     	; 0x3006 <__udivmodsi4_loop>
    302c:	60 95       	com	r22
    302e:	70 95       	com	r23
    3030:	80 95       	com	r24
    3032:	90 95       	com	r25
    3034:	9b 01       	movw	r18, r22
    3036:	ac 01       	movw	r20, r24
    3038:	bd 01       	movw	r22, r26
    303a:	cf 01       	movw	r24, r30
    303c:	08 95       	ret

0000303e <__prologue_saves__>:
    303e:	2f 92       	push	r2
    3040:	3f 92       	push	r3
    3042:	4f 92       	push	r4
    3044:	5f 92       	push	r5
    3046:	6f 92       	push	r6
    3048:	7f 92       	push	r7
    304a:	8f 92       	push	r8
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	ca 1b       	sub	r28, r26
    3068:	db 0b       	sbc	r29, r27
    306a:	0f b6       	in	r0, 0x3f	; 63
    306c:	f8 94       	cli
    306e:	de bf       	out	0x3e, r29	; 62
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	cd bf       	out	0x3d, r28	; 61
    3074:	09 94       	ijmp

00003076 <__epilogue_restores__>:
    3076:	2a 88       	ldd	r2, Y+18	; 0x12
    3078:	39 88       	ldd	r3, Y+17	; 0x11
    307a:	48 88       	ldd	r4, Y+16	; 0x10
    307c:	5f 84       	ldd	r5, Y+15	; 0x0f
    307e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3080:	7d 84       	ldd	r7, Y+13	; 0x0d
    3082:	8c 84       	ldd	r8, Y+12	; 0x0c
    3084:	9b 84       	ldd	r9, Y+11	; 0x0b
    3086:	aa 84       	ldd	r10, Y+10	; 0x0a
    3088:	b9 84       	ldd	r11, Y+9	; 0x09
    308a:	c8 84       	ldd	r12, Y+8	; 0x08
    308c:	df 80       	ldd	r13, Y+7	; 0x07
    308e:	ee 80       	ldd	r14, Y+6	; 0x06
    3090:	fd 80       	ldd	r15, Y+5	; 0x05
    3092:	0c 81       	ldd	r16, Y+4	; 0x04
    3094:	1b 81       	ldd	r17, Y+3	; 0x03
    3096:	aa 81       	ldd	r26, Y+2	; 0x02
    3098:	b9 81       	ldd	r27, Y+1	; 0x01
    309a:	ce 0f       	add	r28, r30
    309c:	d1 1d       	adc	r29, r1
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	f8 94       	cli
    30a2:	de bf       	out	0x3e, r29	; 62
    30a4:	0f be       	out	0x3f, r0	; 63
    30a6:	cd bf       	out	0x3d, r28	; 61
    30a8:	ed 01       	movw	r28, r26
    30aa:	08 95       	ret

000030ac <_exit>:
    30ac:	f8 94       	cli

000030ae <__stop_program>:
    30ae:	ff cf       	rjmp	.-2      	; 0x30ae <__stop_program>
